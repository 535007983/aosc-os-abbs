diff --git a/SConstruct b/SConstruct
index fe7975b..3cf8a1b 100644
--- a/SConstruct
+++ b/SConstruct
@@ -156,7 +156,7 @@ add_option('wiredtiger',
     type='choice',
 )
 
-js_engine_choices = ['mozjs', 'none']
+js_engine_choices = ['mozjs', 'none', 'mozjs-45']
 add_option('js-engine',
     choices=js_engine_choices,
     default=js_engine_choices[0],
@@ -322,6 +322,11 @@ add_option('use-system-icu',
     nargs=0,
 )
 
+add_option('use-system-mozjs',
+    help="use system version of mozjs",
+    nargs=0,
+)
+
 add_option('use-system-intel_decimal128',
     help='use system version of intel decimal128',
     nargs=0,
@@ -2846,20 +2851,20 @@ def doConfigure(myenv):
 
     if use_system_version_of_library("icu"):
         conf.FindSysLibDep("icudata", ["icudata"])
-        # We can't use FindSysLibDep() for icui18n and icuuc below, since SConf.CheckLib() (which
-        # FindSysLibDep() relies on) doesn't expose an 'extra_libs' parameter to indicate that the
-        # library being tested has additional dependencies (icuuc depends on icudata, and icui18n
-        # depends on both). As a workaround, we skip the configure check for these two libraries and
-        # manually assign the library name. We hope that if the user has icudata installed on their
-        # system, then they also have icu18n and icuuc installed.
-        conf.env['LIBDEPS_ICUI18N_SYSLIBDEP'] = 'icui18n'
-        conf.env['LIBDEPS_ICUUC_SYSLIBDEP'] = 'icuuc'
+        conf.FindSysLibDep("icuuc", ["icuuc"])
+        conf.FindSysLibDep("icui18n", ["icui18n"])
+
+    if use_system_version_of_library("mozjs"):
+        conf.FindSysLibDep("mozjs", [jsEngine])
 
     if wiredtiger and use_system_version_of_library("wiredtiger"):
         if not conf.CheckCXXHeader( "wiredtiger.h" ):
             myenv.ConfError("Cannot find wiredtiger headers")
         conf.FindSysLibDep("wiredtiger", ["wiredtiger"])
 
+    if use_system_version_of_library("asio"):
+        conf.CheckCXXHeader("asio.hpp")
+
     conf.env.Append(
         CPPDEFINES=[
             "BOOST_SYSTEM_NO_DEPRECATED",
@@ -3028,7 +3033,7 @@ def doConfigure(myenv):
         if conf.CheckExtendedAlignment(size):
             conf.env.SetConfigHeaderDefine("MONGO_CONFIG_MAX_EXTENDED_ALIGNMENT", size)
             break
- 
+
     conf.env['MONGO_HAVE_LIBMONGOC'] = conf.CheckLibWithHeader(
             ["mongoc-1.0"],
             ["mongoc.h"],
@@ -3168,7 +3173,7 @@ Export("get_option")
 Export("has_option")
 Export("use_system_version_of_library")
 Export("serverJs")
-Export("usemozjs")
+Export("usemozjs jsEngine")
 Export('module_sconscripts')
 Export("debugBuild optBuild")
 Export("wiredtiger")
diff --git a/src/third_party/SConscript b/src/third_party/SConscript
index 416ef7a..9a4f941 100644
--- a/src/third_party/SConscript
+++ b/src/third_party/SConscript
@@ -2,7 +2,7 @@
 
 import libdeps
 
-Import("env use_system_version_of_library usemozjs get_option")
+Import("env use_system_version_of_library usemozjs jsEngine get_option")
 Import("wiredtiger")
 
 boostSuffix = "-1.60.0"
@@ -51,12 +51,15 @@ if not use_system_version_of_library('zlib'):
 # hasn't offered a source tarball since 24, but in theory they could.
 #
 #if not use_system_version_of_library('mozjs'):
-if True:
+if not use_system_version_of_library('mozjs'):
     thirdPartyIncludePathList.append(
         ('mozjs', ['#/src/third_party/mozjs' + mozjsSuffix + '/include',
                    '#/src/third_party/mozjs' + mozjsSuffix + '/mongo_sources',
                    '#/src/third_party/mozjs' + mozjsSuffix + '/platform/' + env["TARGET_ARCH"] + "/" + env["TARGET_OS"] + "/include",
         ]))
+else:
+    thirdPartyIncludePathList.append(
+        ('mozjs', ['#/src/third_party/mozjs' + mozjsSuffix + '/mongo_sources', '/usr/include/'+jsEngine, ]))
 
 if "tom" in env["MONGO_CRYPTO"]:
     thirdPartyIncludePathList.append(
@@ -223,6 +226,21 @@ if usemozjs:
             'shim_zlib',
         ])
 
+    if use_system_version_of_library("mozjs"):
+        env.InjectThirdPartyIncludePaths(libraries=['mozjs'])
+        mozjsEnv = env.Clone(
+            SYSLIBDEPS=[
+                env['LIBDEPS_MOZJS_SYSLIBDEP'],
+            ])
+    else:
+        mozjsEnv = env.Clone()
+        mozjsEnv.SConscript('mozjs' + mozjsSuffix + '/SConscript', exports={'env' : mozjsEnv })
+        mozjsEnv = mozjsEnv.Clone(
+            LIBDEPS=[
+                'mozjs' + mozjsSuffix + '/mozjs',
+                'shim_zlib',
+            ])
+
     mozjsEnv.Library(
         target="shim_mozjs",
         source=[
