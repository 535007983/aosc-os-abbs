Description: Check all uses of dict_find* to ensure 0 return properly handled
 dict_find and friends have the surprising quirk
 of returning < 0 for an error and > 0 for no error.
 But they can also return 0
 which means 'not found' without it being an error.
 .
 From bug 699801,
 if the code assumes the usual case where 0 is a success
 then an attempt might be made to use the empty dictionary slot
 returned by dict_find*,
 which can lead to seg faults,
 and certainly won't have the expected result.
Origin: upstream, http://git.ghostscript.com/?p=ghostpdl.git;h=fac7eb1
Author: Ken Sharp <ken.sharp@artifex.com>
Forwarded: yes
Bug: http://bugs.ghostscript.com/show_bug.cgi?id=699801
Last-Update: 2018-10-18
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/psi/icontext.c
+++ b/psi/icontext.c
@@ -162,7 +162,7 @@
         uint size;
         ref *system_dict = &pcst->dict_stack.system_dict;
 
-        if (dict_find_string(system_dict, "userparams", &puserparams) >= 0)
+        if (dict_find_string(system_dict, "userparams", &puserparams) > 0)
             size = dict_length(puserparams);
         else
             size = 300;
@@ -286,7 +286,7 @@
         /* We need i_ctx_p for access to the d_stack. */
         i_ctx_t *i_ctx_p = pcst;
 
-        if (dict_find_string(systemdict, "userparams", &puserparams) < 0)
+        if (dict_find_string(systemdict, "userparams", &puserparams) <= 0)
             return_error(gs_error_Fatal);
         pcst->userparams = *puserparams;
     }
--- a/psi/zcid.c
+++ b/psi/zcid.c
@@ -72,11 +72,13 @@
     } else
         return false; /* Must not happen. */
     for (;n--; i++) {
+        int code;
+
         if (array_get(mem, DecodingArray, i, &char_code1) < 0 ||
             !r_has_type(&char_code1, t_integer))
             return false; /* Must not happen. */
-        if (dict_find(TT_cmap, &char_code1, &glyph_index) >= 0 &&
-                r_has_type(glyph_index, t_integer)) {
+        code = dict_find(TT_cmap, &char_code1, &glyph_index);
+        if (code > 0 && r_has_type(glyph_index, t_integer)) {
             *c = glyph_index->value.intval;
             found = true;
             if (*c != 0)
--- a/psi/zfapi.c
+++ b/psi/zfapi.c
@@ -1826,6 +1826,9 @@
 
     if ((code = dict_find_string(systemdict, ".xlatmap", &pref)) < 0)
         return code;
+    if (code == 0)
+        return_error(gs_error_undefined);
+
     if (r_type(pref) != t_string)
         return_error(gs_error_typecheck);
     *xlatmap = (char *)pref->value.bytes;
@@ -1881,11 +1884,11 @@
     ref *FAPIconfig, *options, *server_options;
     i_ctx_t *i_ctx_p = (i_ctx_t *) I->client_ctx_p;
 
-    if (dict_find_string(systemdict, ".FAPIconfig", &FAPIconfig) >= 0
+    if (dict_find_string(systemdict, ".FAPIconfig", &FAPIconfig) > 0
         && r_has_type(FAPIconfig, t_dictionary)) {
-        if (dict_find_string(FAPIconfig, "ServerOptions", &options) >= 0
+        if (dict_find_string(FAPIconfig, "ServerOptions", &options) > 0
             && r_has_type(options, t_dictionary)) {
-            if (dict_find_string(options, (char *)subtype, &server_options) >=
+            if (dict_find_string(options, (char *)subtype, &server_options) >
                 0 && r_has_type(server_options, t_string)) {
                 *server_param = (byte *) server_options->value.const_bytes;
                 *server_param_size = r_size(server_options);
@@ -2070,7 +2073,7 @@
     pdata = (font_data *) pfont->client_data;
     I = pbfont->FAPI;
 
-    if (dict_find_string((op - 1), "SubfontId", &v) >= 0
+    if (dict_find_string((op - 1), "SubfontId", &v) > 0
         && r_has_type(v, t_integer))
         subfont = v->value.intval;
     else
@@ -2277,8 +2280,8 @@
         if (pbfont->FontType == ft_CID_TrueType && font_file_path) {
             ref *pdr2, *fidr, *dummy;
             pdr2 = pfont_dict(gs_rootfont(igs));
-            if (dict_find_string(pdr2, "FontInfo", &fidr) &&
-                dict_find_string(fidr, "GlyphNames2Unicode", &dummy))
+            if (dict_find_string(pdr2, "FontInfo", &fidr) > 0 &&
+                dict_find_string(fidr, "GlyphNames2Unicode", &dummy) > 0)
             {
                 unsigned char uc[4] = {0};
                 unsigned int cc = 0;
@@ -2417,13 +2420,13 @@
 
                 fdict = pfont_dict(gs_rootfont(igs));
                 code = dict_find_string(fdict, "CMap", &CMapDict);
-                if (code >= 0 && r_has_type(CMapDict, t_dictionary)) {
+                if (code > 0 && r_has_type(CMapDict, t_dictionary)) {
                     code = dict_find_string(CMapDict, "WMode", &WMode);
-                    if (code >= 0 && r_has_type(WMode, t_integer)) {
+                    if (code > 0 && r_has_type(WMode, t_integer)) {
                         wmode = WMode->value.intval;
                     }
                     code = dict_find_string(CMapDict, "CMapName", &CMapName);
-                    if (code >= 0 && r_has_type(CMapName, t_name)) {
+                    if (code > 0 && r_has_type(CMapName, t_name)) {
                         name_string_ref(imemory, CMapName, &CMapNameStr);
                         cmapnm = (char *)CMapNameStr.value.bytes;
                         cmapnmlen = r_size(&CMapNameStr);
@@ -2432,10 +2435,10 @@
                 /* We only have to lookup the char code if we're *not* using an identity ordering 
                    with the exception of Identity-UTF16 which is a different beast altogether */
                 if (unicode_cp || (cmapnmlen > 0 && !strncmp(cmapnm, utfcmap, cmapnmlen > utfcmaplen ? utfcmaplen : cmapnmlen))
-                    || (dict_find_string(pdr, "CIDSystemInfo", &CIDSystemInfo) >= 0
+                    || (dict_find_string(pdr, "CIDSystemInfo", &CIDSystemInfo) > 0
                     && r_has_type(CIDSystemInfo, t_dictionary)
                     && dict_find_string(CIDSystemInfo, "Ordering",
-                                        &Ordering) >= 0
+                                        &Ordering) > 0
                     && r_has_type(Ordering, t_string)
                     && strncmp((const char *)Ordering->value.bytes,
                                "Identity", 8) != 0)) {
@@ -2463,7 +2466,7 @@
                 ref cc32;
                 ref *gid;
                 make_int(&cc32, 32);
-                if (dict_find(TT_cmap, &cc32, &gid) >= 0)
+                if (dict_find(TT_cmap, &cc32, &gid) > 0)
                     c = gid->value.intval;
             }
             cr->char_codes[0] = c;
@@ -2536,7 +2539,7 @@
         if (dict_find_string(pdr, "CharStrings", &CharStrings) <= 0
             || !r_has_type(CharStrings, t_dictionary))
             return_error(gs_error_invalidfont);
-        if ((dict_find(CharStrings, &char_name, &glyph_index) < 0)
+        if ((dict_find(CharStrings, &char_name, &glyph_index) <= 0)
             || r_has_type(glyph_index, t_null)) {
 #ifdef DEBUG
             ref *pvalue;
@@ -2955,7 +2958,7 @@
     if (code < 0)
         return code;
 
-    if (dict_find_string(op, "SubfontId", &v) >= 0
+    if (dict_find_string(op, "SubfontId", &v) > 0
         && r_has_type(v, t_integer))
         subfont = v->value.intval;
     else
@@ -2968,7 +2971,7 @@
     /* If the font dictionary contains a FAPIPlugInReq key, the the PS world wants us
      * to try to use a specific FAPI plugin, so find it, and try it....
      */
-    if (dict_find_string(op, "FAPIPlugInReq", &v) >= 0 && r_type(v) == t_name) {
+    if (dict_find_string(op, "FAPIPlugInReq", &v) > 0 && r_type(v) == t_name) {
 
         name_string_ref(imemory, v, &reqstr);
 
--- a/psi/zfcid0.c
+++ b/psi/zfcid0.c
@@ -410,13 +410,25 @@
      * from a file, GlyphData will be an integer, and DataSource will be
      * a (reusable) stream.
      */
-    if (code < 0 ||
-        (code = cid_font_data_param(op, &common, &GlyphDirectory)) < 0 ||
-        (code = dict_find_string(op, "FDArray", &prfda)) < 0 ||
-        (code = dict_find_string(op, "CIDFontName", &pCIDFontName)) <= 0 ||
-        (code = dict_int_param(op, "FDBytes", 0, MAX_FDBytes, -1, &FDBytes)) < 0
-        )
+    if (code < 0)
         return code;
+    code = cid_font_data_param(op, &common, &GlyphDirectory);
+    if (code < 0)
+        return code;
+    code = dict_find_string(op, "FDArray", &prfda);
+    if (code < 0)
+        return code;
+    if (code == 0)
+        return_error(gs_error_undefined);
+    code = dict_find_string(op, "CIDFontName", &pCIDFontName);
+    if (code < 0)
+        return code;
+    if (code == 0)
+        return_error(gs_error_undefined);
+    code = dict_int_param(op, "FDBytes", 0, MAX_FDBytes, -1, &FDBytes);
+    if (code < 0)
+        return code;
+
     /*
      * Since build_gs_simple_font may resize the dictionary and cause
      * pointers to become invalid, save CIDFontName
@@ -426,17 +438,24 @@
         /* Standard CIDFont, require GlyphData and CIDMapOffset. */
         ref *pGlyphData;
 
-        if ((code = dict_find_string(op, "GlyphData", &pGlyphData)) < 0 ||
-            (code = dict_uint_param(op, "CIDMapOffset", 0, max_uint - 1,
-                                    max_uint, &CIDMapOffset)) < 0)
+        code = dict_find_string(op, "GlyphData", &pGlyphData);
+        if (code < 0)
+            return code;
+        if (code == 0)
+            return_error(gs_error_undefined);
+        code = dict_uint_param(op, "CIDMapOffset", 0, max_uint - 1, max_uint, &CIDMapOffset);
+        if (code < 0)
             return code;
         GlyphData = *pGlyphData;
         if (r_has_type(&GlyphData, t_integer)) {
             ref *pds;
             stream *ignore_s;
 
-            if ((code = dict_find_string(op, "DataSource", &pds)) < 0)
+            code = dict_find_string(op, "DataSource", &pds);
+            if (code < 0)
                 return code;
+            if (code == 0)
+                return_error(gs_error_undefined);
             check_read_file(i_ctx_p, ignore_s, pds);
             DataSource = *pds;
         } else {
--- a/psi/zfcid1.c
+++ b/psi/zfcid1.c
@@ -347,11 +347,17 @@
     ref rcidmap, ignore_gdir, file, *pfile, cfnstr, *pCIDFontName, CIDFontName, *t;
     ulong loca_glyph_pos[2][2];
     int code = cid_font_data_param(op, &common, &ignore_gdir);
+    if (code < 0)
+        return code;
 
-    if (code < 0 ||
-        (code = dict_find_string(op, "CIDFontName", &pCIDFontName)) <= 0 ||
-        (code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount)) < 0
-        )
+    code = dict_find_string(op, "CIDFontName", &pCIDFontName);
+    if (code <= 0) {
+        if (code == 0)
+            return_error(gs_error_undefined);
+        return code;
+    }
+    code = dict_int_param(op, "MetricsCount", 0, 4, 0, &MetricsCount);
+    if (code < 0)
         return code;
     /*
      * Since build_gs_simple_font may resize the dictionary and cause
--- a/psi/zicc.c
+++ b/psi/zicc.c
@@ -261,6 +261,8 @@
     code = dict_find_string(op, "N", &pnval);
     if (code < 0)
         return code;
+    if (code == 0)
+        return_error(gs_error_undefined);
     ncomps = pnval->value.intval;
 
     /* verify the DataSource entry. Creat profile from stream */
@@ -491,6 +493,8 @@
     code = dict_find_string(op, "N", &pnval);
     if (code < 0)
         return code;
+    if (code == 0)
+        return_error(gs_error_undefined);
     ncomps = pnval->value.intval;
     /* verify the DataSource entry. Create profile from stream */
     if (dict_find_string(op, "DataSource", &pstrmval) <= 0)
--- a/psi/zpdf_r6.c
+++ b/psi/zpdf_r6.c
@@ -145,21 +145,36 @@
         return_error(gs_error_typecheck);
     
     code = dict_find_string(CryptDict, "O", &Oref);
-    if (code < 0 || !r_has_type(Oref, t_string)) {
+    if (code < 0)
+        return code;
+    if (code == 0)
+        return_error(gs_error_undefined);
+    if (!r_has_type(Oref, t_string))
       return_error(gs_error_typecheck);
-    }
+
     code = dict_find_string(CryptDict, "OE", &OEref);
-    if (code < 0 || !r_has_type(OEref, t_string)) {
+    if (code < 0)
+        return code;
+    if (code == 0)
+        return_error(gs_error_undefined);
+    if (!r_has_type(OEref, t_string))
       return_error(gs_error_typecheck);
-    }
+
     code = dict_find_string(CryptDict, "U", &Uref);
-    if (code < 0 || !r_has_type(Uref, t_string)) {
+    if (code < 0)
+        return code;
+    if (code == 0)
+        return_error(gs_error_undefined);
+    if (!r_has_type(Uref, t_string))
       return_error(gs_error_typecheck);
-    }
+
     code = dict_find_string(CryptDict, "UE", &UEref);
-    if (code < 0 || !r_has_type(UEref, t_string)) {
+    if (code < 0)
+        return code;
+    if (code == 0)
+        return_error(gs_error_undefined);
+    if (!r_has_type(UEref, t_string))
       return_error(gs_error_typecheck);
-    }
 
     pop(2);
     op = osp;
--- a/psi/ztoken.c
+++ b/psi/ztoken.c
@@ -356,7 +356,7 @@
         int code = dict_find_string(upref, pnso->pname, &ppcproc);
 
         /* Update the options only if the parameter has changed. */
-        if (code >= 0) {
+        if (code > 0) {
             if (r_has_type(ppcproc, t_null))
                 options &= ~pnso->option;
             else
