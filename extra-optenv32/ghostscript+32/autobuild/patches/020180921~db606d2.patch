Description: device subclass open_device call must return child code
 Even with changes to detect and clean up
 from errors in setpagedevice (b5) and .bigstring,
 the segfault was still possible
 because the error return code from the child was being ignored,
 and the device is_open was set true
 when the child device was NOT open.
 Attempt to 'fillpage' on a clist device that is not open
 is what caused the SEGV.
Origin: upstream, http://git.ghostscript.com/?p=ghostpdl.git;h=db606d2
Author: Ray Johnston <ray.johnston@artifex.com>
Forwarded: yes
Bug: http://bugs.ghostscript.com/show_bug.cgi?id=699794
Last-Update: 2018-10-18
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/base/gdevsclass.c
+++ b/base/gdevsclass.c
@@ -99,13 +99,21 @@
  */
 int default_subclass_open_device(gx_device *dev)
 {
-    if (dev->child) {
-        dev_proc(dev->child, open_device)(dev->child);
-        dev->child->is_open = true;
-        gx_update_from_subclass(dev);
-    }
+    int code = 0;
 
-    return 0;
+    /* observed with Bug 699794, don't set is_open = true if the open_device failed */
+    /* and make sure to propagate the return code from the child device to caller.  */
+    /* Only open the child if it was closed  and if child open is OK, return 1.     */
+    /* (see gs_opendevice) */
+    if (dev->child && dev->child->is_open == 0) {
+        code = dev_proc(dev->child, open_device)(dev->child);
+        if (code >= 0) {
+            dev->child->is_open = true;
+            code = 1;	/* device had been closed, but now is open */
+        }
+        gx_update_from_subclass(dev);	/* this is probably safe to do even if the open failed */
+    }
+    return code;
 }
 
 void default_subclass_get_initial_matrix(gx_device *dev, gs_matrix *pmat)
