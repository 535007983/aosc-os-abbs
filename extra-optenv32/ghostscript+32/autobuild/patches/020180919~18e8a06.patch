Description: Fix handling of .needinput if used from interpreter
 .needinput is meant as an internal function,
 but it is exposed to the user.
 I couldn't see an easy way to undefine it.
 .
 But if user calls it,
 it returns gs_error_Fatal in a place that the code wasn't expecting,
 and basically puts things in an undefined state.
 This change returns a Fatal error at this point, instead.
Origin: upstream, http://git.ghostscript.com/?p=ghostpdl.git;h=18e8a06
Author: Nancy Durgin <nancy.durgin@artifex.com>
Forwarded: yes
Bug: http://bugs.ghostscript.com/show_bug.cgi?id=699793
Last-Update: 2018-10-18
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/psi/imain.c
+++ b/psi/imain.c
@@ -606,8 +606,15 @@
                                        pexit_code, perror_object);
     if (code != gs_error_NeedInput)
         return code;
-    return gs_main_run_string_end(minst, user_errors,
+
+    code = gs_main_run_string_end(minst, user_errors,
                                   pexit_code, perror_object);
+    /* Not okay for user to use .needinput
+     * This treats it as a fatal error.
+     */
+    if (code == gs_error_NeedInput)
+        return_error(gs_error_Fatal);
+    return code;
 }
 
 /* Set up for a suspendable run_string. */
