--- octave-4.2.1/libinterp/corefcn/pr-output.cc	2017-02-22 12:01:55.000000000 -0600
+++ octave-4.2.1.working/libinterp/corefcn/pr-output.cc	2017-09-25 23:30:55.826632833 -0500
@@ -33,6 +33,8 @@
 #include <sstream>
 #include <string>
 
+#include <math.h>
+
 #include "Array-util.h"
 #include "CMatrix.h"
 #include "Range.h"
@@ -242,7 +244,7 @@
   if (x != 0)
     {
       double absval = (x < 0.0 ? -x : x);
-      int logabsval = static_cast<int> (std::floor (log10 (absval)));
+      int logabsval = static_cast<int> (floor (log10 (absval)));
       // Avoid using modulo function with negative arguments for
       // portability.  See extended comment at calc_scale_exp
       if (logabsval < 0.0)
@@ -258,7 +260,7 @@
 {
   return 1 + (print_eng
               ? engineering_exponent (x)
-              : static_cast<int> (std::floor (log10 (x))));
+              : static_cast<int> (floor (log10 (x))));
 }
 
 class
@@ -389,7 +391,7 @@
           double nextd = d;
 
           // Have we converged to 1/intmax ?
-          if (std::abs (flip) > static_cast<double> (std::numeric_limits<int>::max ()))
+          if (abs (flip) > static_cast<double> (std::numeric_limits<int>::max ()))
             {
               lastn = n;
               lastd = d;
@@ -417,8 +419,8 @@
           else if (buf.str ().length () > static_cast<unsigned int>(len))
             break;
 
-          if (std::abs (n) > std::numeric_limits<int>::max ()
-              || std::abs (d) > std::numeric_limits<int>::max ())
+          if (abs (n) > std::numeric_limits<int>::max ()
+              || abs (d) > std::numeric_limits<int>::max ())
             break;
 
           s = buf.str ();
@@ -3265,7 +3267,7 @@
             {
               int new_digits
                 = static_cast<int>
-                  (std::floor (log10 (double (abs (nda(i).value ()))) + 1.0));
+                  (floor (log10 (double (abs (nda(i).value ()))) + 1.0));
 
               if (new_digits > digits)
                 digits = new_digits;
