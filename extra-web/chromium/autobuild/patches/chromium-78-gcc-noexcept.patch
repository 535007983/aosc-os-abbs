From d16cda8fc3476cc534a756873cc8aa2692a57054 Mon Sep 17 00:00:00 2001
From: Jose Dapena Paz <jose.dapena@lge.com>
Date: Thu, 22 Aug 2019 13:13:36 +0200
Subject: [PATCH] GCC: declare noexcept move constructor/assign operators of V8StackTraceId

blink::BlinkCloneableMessage declares default implementation of
move operator/assign operator that requires v8_inspector::V8StackTraceId
to declare its move constructor/assign operator too.

Bug: chromium:819294
Change-Id: Iaf626ee8245efcba372a17cdf2de448e691d41d6
Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/1796062
Commit-Queue: Jos√© Dapena Paz <jose.dapena@lge.com>
Reviewed-by: Yang Guo <yangguo@chromium.org>
Cr-Commit-Position: refs/heads/master@{#63799}
---

diff --git a/v8/include/v8-inspector.h b/v8/include/v8-inspector.h
index ce5b777..ed4cdec 100644
--- a/v8/include/v8-inspector.h
+++ b/v8/include/v8-inspector.h
@@ -231,7 +231,10 @@ struct V8_EXPORT V8StackTraceId {
   std::pair<int64_t, int64_t> debugger_id;
 
   V8StackTraceId();
+  V8StackTraceId(const V8StackTraceId&) = default;
   V8StackTraceId(uintptr_t id, const std::pair<int64_t, int64_t> debugger_id);
+  V8StackTraceId& operator=(const V8StackTraceId&) = default;
+  V8StackTraceId& operator=(V8StackTraceId&&) noexcept = default;
   ~V8StackTraceId() = default;
 
   bool IsInvalid() const;
diff --git a/third_party/blink/renderer/core/messaging/blink_cloneable_message.cc b/third_party/blink/renderer/core/messaging/blink_cloneable_message.cc
index b6c876841587c..74239307e6e8a 100644
--- a/third_party/blink/renderer/core/messaging/blink_cloneable_message.cc
+++ b/third_party/blink/renderer/core/messaging/blink_cloneable_message.cc
@@ -9,9 +9,8 @@ namespace blink {
 BlinkCloneableMessage::BlinkCloneableMessage() = default;
 BlinkCloneableMessage::~BlinkCloneableMessage() = default;
 
-BlinkCloneableMessage::BlinkCloneableMessage(BlinkCloneableMessage&&) noexcept =
-    default;
+BlinkCloneableMessage::BlinkCloneableMessage(BlinkCloneableMessage&&) = default;
 BlinkCloneableMessage& BlinkCloneableMessage::operator=(
-    BlinkCloneableMessage&&) noexcept = default;
+    BlinkCloneableMessage&&) = default;
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/messaging/blink_cloneable_message.h b/third_party/blink/renderer/core/messaging/blink_cloneable_message.h
index 337b0f82b81cf..a51e888047a3a 100644
--- a/third_party/blink/renderer/core/messaging/blink_cloneable_message.h
+++ b/third_party/blink/renderer/core/messaging/blink_cloneable_message.h
@@ -21,8 +21,8 @@ struct CORE_EXPORT BlinkCloneableMessage {
   BlinkCloneableMessage();
   ~BlinkCloneableMessage();
 
-  BlinkCloneableMessage(BlinkCloneableMessage&&) noexcept;
-  BlinkCloneableMessage& operator=(BlinkCloneableMessage&&) noexcept;
+  BlinkCloneableMessage(BlinkCloneableMessage&&);
+  BlinkCloneableMessage& operator=(BlinkCloneableMessage&&);
 
   scoped_refptr<blink::SerializedScriptValue> message;
   v8_inspector::V8StackTraceId sender_stack_trace_id;

diff --git a/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util.h b/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util.h
index 99f47f56b2f6a..8451b86539b1d 100644
--- a/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util.h
+++ b/third_party/blink/public/web/modules/mediastream/media_stream_constraints_util.h
@@ -73,8 +73,8 @@ class BLINK_MODULES_EXPORT VideoCaptureSettings {
 
   VideoCaptureSettings(const VideoCaptureSettings& other);
   VideoCaptureSettings& operator=(const VideoCaptureSettings& other);
-  VideoCaptureSettings(VideoCaptureSettings&& other) noexcept;
-  VideoCaptureSettings& operator=(VideoCaptureSettings&& other) noexcept;
+  VideoCaptureSettings(VideoCaptureSettings&& other);
+  VideoCaptureSettings& operator=(VideoCaptureSettings&& other);
   ~VideoCaptureSettings();
 
   bool HasValue() const { return !failed_constraint_name_; }
@@ -193,8 +193,8 @@ class BLINK_MODULES_EXPORT AudioCaptureSettings {
       const AudioProcessingProperties& audio_processing_properties);
   AudioCaptureSettings(const AudioCaptureSettings& other);
   AudioCaptureSettings& operator=(const AudioCaptureSettings& other);
-  AudioCaptureSettings(AudioCaptureSettings&& other) noexcept;
-  AudioCaptureSettings& operator=(AudioCaptureSettings&& other) noexcept;
+  AudioCaptureSettings(AudioCaptureSettings&& other);
+  AudioCaptureSettings& operator=(AudioCaptureSettings&& other);
 
   bool HasValue() const { return !failed_constraint_name_; }
 
diff --git a/third_party/blink/common/messaging/transferable_message.cc b/third_party/blink/common/messaging/transferable_message.cc
index 07ac9bbce4cb0..4a69d0aa71401 100644
--- a/third_party/blink/common/messaging/transferable_message.cc
+++ b/third_party/blink/common/messaging/transferable_message.cc
@@ -9,10 +9,9 @@
 namespace blink {
 
 TransferableMessage::TransferableMessage() = default;
-TransferableMessage::TransferableMessage(TransferableMessage&&) noexcept =
+TransferableMessage::TransferableMessage(TransferableMessage&&) = default;
+TransferableMessage& TransferableMessage::operator=(TransferableMessage&&) =
     default;
-TransferableMessage& TransferableMessage::operator=(
-    TransferableMessage&&) noexcept = default;
 TransferableMessage::~TransferableMessage() = default;
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/messaging/blink_transferable_message.cc b/third_party/blink/renderer/core/messaging/blink_transferable_message.cc
index 909ddb0272a60..b5cdfda6a3db3 100644
--- a/third_party/blink/renderer/core/messaging/blink_transferable_message.cc
+++ b/third_party/blink/renderer/core/messaging/blink_transferable_message.cc
@@ -16,10 +16,10 @@ namespace blink {
 BlinkTransferableMessage::BlinkTransferableMessage() = default;
 BlinkTransferableMessage::~BlinkTransferableMessage() = default;
 
-BlinkTransferableMessage::BlinkTransferableMessage(
-    BlinkTransferableMessage&&) noexcept = default;
+BlinkTransferableMessage::BlinkTransferableMessage(BlinkTransferableMessage&&) =
+    default;
 BlinkTransferableMessage& BlinkTransferableMessage::operator=(
-    BlinkTransferableMessage&&) noexcept = default;
+    BlinkTransferableMessage&&) = default;
 
 scoped_refptr<blink::StaticBitmapImage> ToStaticBitmapImage(
     const SkBitmap& sk_bitmap) {
diff --git a/third_party/blink/renderer/core/messaging/blink_transferable_message.h b/third_party/blink/renderer/core/messaging/blink_transferable_message.h
index edf4fab0ffa8a..3957bed8775b2 100644
--- a/third_party/blink/renderer/core/messaging/blink_transferable_message.h
+++ b/third_party/blink/renderer/core/messaging/blink_transferable_message.h
@@ -24,8 +24,8 @@ struct CORE_EXPORT BlinkTransferableMessage : BlinkCloneableMessage {
   BlinkTransferableMessage();
   ~BlinkTransferableMessage();
 
-  BlinkTransferableMessage(BlinkTransferableMessage&&) noexcept;
-  BlinkTransferableMessage& operator=(BlinkTransferableMessage&&) noexcept;
+  BlinkTransferableMessage(BlinkTransferableMessage&&);
+  BlinkTransferableMessage& operator=(BlinkTransferableMessage&&);
 
   Vector<MessagePortChannel> ports;
 
diff --git a/third_party/blink/renderer/platform/weborigin/origin_access_entry.cc b/third_party/blink/renderer/platform/weborigin/origin_access_entry.cc
index 2e9a9d1a7d2ea..c9d777e716059 100644
--- a/third_party/blink/renderer/platform/weborigin/origin_access_entry.cc
+++ b/third_party/blink/renderer/platform/weborigin/origin_access_entry.cc
@@ -59,8 +59,7 @@ OriginAccessEntry::OriginAccessEntry(
                network::mojom::CorsPortMatchMode::kAllowOnlySpecifiedPort,
                priority) {}
 
-OriginAccessEntry::OriginAccessEntry(OriginAccessEntry&& from) noexcept =
-    default;
+OriginAccessEntry::OriginAccessEntry(OriginAccessEntry&& from) = default;
 
 network::cors::OriginAccessEntry::MatchResult OriginAccessEntry::MatchesOrigin(
     const SecurityOrigin& origin) const {
diff --git a/third_party/blink/renderer/platform/weborigin/origin_access_entry.h b/third_party/blink/renderer/platform/weborigin/origin_access_entry.h
index b3e567474f6ff..5113a406bd353 100644
--- a/third_party/blink/renderer/platform/weborigin/origin_access_entry.h
+++ b/third_party/blink/renderer/platform/weborigin/origin_access_entry.h
@@ -58,7 +58,7 @@ class PLATFORM_EXPORT OriginAccessEntry {
       network::mojom::CorsDomainMatchMode,
       network::mojom::CorsOriginAccessMatchPriority priority =
           network::mojom::CorsOriginAccessMatchPriority::kDefaultPriority);
-  OriginAccessEntry(OriginAccessEntry&& from) noexcept;
+  OriginAccessEntry(OriginAccessEntry&& from);
 
   network::cors::OriginAccessEntry::MatchResult MatchesOrigin(
       const SecurityOrigin&) const;
diff --git a/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util.cc b/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util.cc
index 24499bd1a0ca9..3bf00e9d36a66 100644
--- a/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util.cc
+++ b/third_party/blink/renderer/modules/mediastream/media_stream_constraints_util.cc
@@ -134,13 +134,13 @@ VideoCaptureSettings::VideoCaptureSettings(
 
 VideoCaptureSettings::VideoCaptureSettings(const VideoCaptureSettings& other) =
     default;
-VideoCaptureSettings::VideoCaptureSettings(
-    VideoCaptureSettings&& other) noexcept = default;
+VideoCaptureSettings::VideoCaptureSettings(VideoCaptureSettings&& other) =
+    default;
 VideoCaptureSettings::~VideoCaptureSettings() = default;
 VideoCaptureSettings& VideoCaptureSettings::operator=(
     const VideoCaptureSettings& other) = default;
 VideoCaptureSettings& VideoCaptureSettings::operator=(
-    VideoCaptureSettings&& other) noexcept = default;
+    VideoCaptureSettings&& other) = default;
 
 AudioCaptureSettings::AudioCaptureSettings() : AudioCaptureSettings("") {}
 
@@ -166,10 +166,10 @@ AudioCaptureSettings::AudioCaptureSettings(const AudioCaptureSettings& other) =
     default;
 AudioCaptureSettings& AudioCaptureSettings::operator=(
     const AudioCaptureSettings& other) = default;
-AudioCaptureSettings::AudioCaptureSettings(
-    AudioCaptureSettings&& other) noexcept = default;
+AudioCaptureSettings::AudioCaptureSettings(AudioCaptureSettings&& other) =
+    default;
 AudioCaptureSettings& AudioCaptureSettings::operator=(
-    AudioCaptureSettings&& other) noexcept = default;
+    AudioCaptureSettings&& other) = default;
 
 bool GetConstraintValueAsBoolean(
     const WebMediaConstraints& constraints,

