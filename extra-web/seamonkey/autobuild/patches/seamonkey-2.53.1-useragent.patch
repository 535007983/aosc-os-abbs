diff -Nrup -U 8 seamonkey-2.53-comm-2_53_beta_01/calendar/base/src/calCalendarManager.js seamonkey-2.53-comm-2_53_beta_01-OK/calendar/base/src/calCalendarManager.js
--- seamonkey-2.53-comm-2_53_beta_01/calendar/base/src/calCalendarManager.js	2019-12-31 03:14:14.000000000 +0300
+++ seamonkey-2.53-comm-2_53_beta_01-OK/calendar/base/src/calCalendarManager.js	2020-02-19 23:52:08.526194868 +0300
@@ -141,41 +141,43 @@ calCalendarManager.prototype = {
                     // Possible reasons we got here:
                     // - Its not a http channel (wtf? Oh well)
                     // - The owner is not a calICalendar (looks like its not our deal)
                     // - The WWW-Authenticate header is missing (thats ok)
                 }
                 break;
             }
             case "http-on-modify-request": {
-                // Unfortunately, the ability to do this with a general pref has
-                // been removed. Calendar servers might still want to know what
-                // client is used for access, so add our UA String to each
-                // request.
-                let httpChannel = aSubject.QueryInterface(Components.interfaces.nsIHttpChannel);
-                try {
-                    // NOTE: For some reason, this observer call doesn't have
-                    // the "cal" namespace defined
-                    let userAgent = httpChannel.getRequestHeader("User-Agent");
-                    let calUAString = Preferences.get("calendar.useragent.extra", "").trim();
-
-                    // Don't add an empty string or an already included token.
-                    if (calUAString && !userAgent.includes(calUAString)) {
-                        // User-Agent is not a mergeable header. We need to
-                        // merge the user agent ourselves.
-                        httpChannel.setRequestHeader("User-Agent",
-                                                     userAgent + " " + calUAString,
-                                                     false);
-                    }
-                } catch (e) {
-                    if (e.result != Components.results.NS_ERROR_NOT_AVAILABLE) {
-                        throw e;
+                if (!Preferences.get("general.useragent.compatMode.firefox-exact", false)) {
+                    // Unfortunately, the ability to do this with a general pref has
+                    // been removed. Calendar servers might still want to know what
+                    // client is used for access, so add our UA String to each
+                    // request.
+                    let httpChannel = aSubject.QueryInterface(Components.interfaces.nsIHttpChannel);
+                    try {
+                        // NOTE: For some reason, this observer call doesn't have
+                        // the "cal" namespace defined
+                        let userAgent = httpChannel.getRequestHeader("User-Agent");
+                        let calUAString = Preferences.get("calendar.useragent.extra", "").trim();
+    
+                        // Don't add an empty string or an already included token.
+                        if (calUAString && !userAgent.includes(calUAString)) {
+                            // User-Agent is not a mergeable header. We need to
+                            // merge the user agent ourselves.
+                            httpChannel.setRequestHeader("User-Agent",
+                                                         userAgent + " " + calUAString,
+                                                         false);
+                        }
+                    } catch (e) {
+                        if (e.result != Components.results.NS_ERROR_NOT_AVAILABLE) {
+                            throw e;
+                        }
+                        // We swallow this error since it means the User Agent
+                        // header is not set. We don't want to force it to be set.
                     }
-                    // We swallow this error since it means the User Agent
-                    // header is not set. We don't want to force it to be set.
                 }
                 break;
             }
         }
     },
 
     //
     // DB migration code begins here
diff -Nrup -U 8 seamonkey-2.53-comm-2_53_beta_01/mozilla/netwerk/protocol/http/nsHttpHandler.cpp seamonkey-2.53-comm-2_53_beta_01-OK/mozilla/netwerk/protocol/http/nsHttpHandler.cpp
--- seamonkey-2.53-comm-2_53_beta_01/mozilla/netwerk/protocol/http/nsHttpHandler.cpp	2019-12-29 20:38:43.000000000 +0300
+++ seamonkey-2.53-comm-2_53_beta_01-OK/mozilla/netwerk/protocol/http/nsHttpHandler.cpp	2020-02-19 23:52:08.527194862 +0300
@@ -202,16 +202,17 @@ nsHttpHandler::nsHttpHandler()
     , mQoSBits(0x00)
     , mEnforceAssocReq(false)
     , mLastUniqueID(NowInSeconds())
     , mSessionStartTime(0)
     , mLegacyAppName("Mozilla")
     , mLegacyAppVersion("5.0")
     , mProduct("Gecko")
     , mCompatFirefoxEnabled(false)
+    , mCompatFirefoxExact(false)
     , mUserAgentIsDirty(true)
     , mAcceptLanguagesIsDirty(true)
     , mPromptTempRedirect(true)
     , mEnablePersistentHttpsCaching(false)
     , mDoNotTrackEnabled(false)
     , mSafeHintEnabled(false)
     , mParentalControlEnabled(false)
     , mHandlerActive(false)
@@ -900,17 +901,17 @@ nsHttpHandler::BuildUserAgent()
     mUserAgent += ')';
 
     // Product portion
     mUserAgent += ' ';
     mUserAgent += mProduct;
     mUserAgent += '/';
     mUserAgent += mProductSub;
 
-    bool isFirefox = mAppName.EqualsLiteral("Firefox");
+    bool isFirefox = mAppName.EqualsLiteral("Firefox") || mCompatFirefoxExact;
     if (isFirefox || mCompatFirefoxEnabled) {
         // "Firefox/x.y" (compatibility) app token
         mUserAgent += ' ';
         mUserAgent += mCompatFirefox;
     }
     if (!isFirefox) {
         // App portion
         mUserAgent += ' ';
@@ -1138,16 +1139,22 @@ nsHttpHandler::PrefsChanged(nsIPrefBranc
     bool cVar = false;
 
     if (PREF_CHANGED(UA_PREF("compatMode.firefox"))) {
         rv = prefs->GetBoolPref(UA_PREF("compatMode.firefox"), &cVar);
         mCompatFirefoxEnabled = (NS_SUCCEEDED(rv) && cVar);
         mUserAgentIsDirty = true;
     }
 
+    if (PREF_CHANGED(UA_PREF("compatMode.firefox-exact"))) {
+        rv = prefs->GetBoolPref(UA_PREF("compatMode.firefox-exact"), &cVar);
+        mCompatFirefoxExact = (NS_SUCCEEDED(rv) && cVar);
+        mUserAgentIsDirty = true;
+    }
+
     // general.useragent.override
     if (PREF_CHANGED(UA_PREF("override"))) {
         prefs->GetCharPref(UA_PREF("override"),
                             getter_Copies(mUserAgentOverride));
         mUserAgentIsDirty = true;
     }
 
 #ifdef ANDROID
diff -Nrup -U 8 seamonkey-2.53-comm-2_53_beta_01/mozilla/netwerk/protocol/http/nsHttpHandler.h seamonkey-2.53-comm-2_53_beta_01-OK/mozilla/netwerk/protocol/http/nsHttpHandler.h
--- seamonkey-2.53-comm-2_53_beta_01/mozilla/netwerk/protocol/http/nsHttpHandler.h	2020-02-20 03:42:49.910562361 +0300
+++ seamonkey-2.53-comm-2_53_beta_01-OK/mozilla/netwerk/protocol/http/nsHttpHandler.h	2020-02-19 23:52:08.527194862 +0300
@@ -492,16 +492,17 @@ private:
     nsCString      mOscpu;
     nsCString      mMisc;
     nsCString      mProduct;
     nsCString      mProductSub;
     nsCString      mAppName;
     nsCString      mAppVersion;
     nsCString      mCompatFirefox;
     bool           mCompatFirefoxEnabled;
+    bool           mCompatFirefoxExact;
     nsCString      mCompatDevice;
     nsCString      mDeviceModelId;
 
     nsCString      mUserAgent;
     nsCString      mSpoofedUserAgent;
     nsCString      mUserAgentOverride;
     bool           mUserAgentIsDirty; // true if mUserAgent should be rebuilt
     bool           mAcceptLanguagesIsDirty;
diff -Nrup -U 8 seamonkey-2.53-comm-2_53_beta_01/suite/app/profile/suite-prefs.js seamonkey-2.53-comm-2_53_beta_01-OK/suite/app/profile/suite-prefs.js
--- seamonkey-2.53-comm-2_53_beta_01/suite/app/profile/suite-prefs.js	2020-02-20 03:42:50.063561357 +0300
+++ seamonkey-2.53-comm-2_53_beta_01-OK/suite/app/profile/suite-prefs.js	2020-02-19 23:52:08.532194833 +0300
@@ -36,16 +36,17 @@ pref("general.startup.addressbook",
 pref("general.open_location.last_url",      "");
 pref("general.open_location.last_window_choice", 0);
 pref("browser.urlbar.historyEnabled",       true);
 
 pref("general.smoothScroll", false);
 pref("general.autoScroll", true);
 
 pref("general.useragent.compatMode.firefox", true);
+pref("general.useragent.compatMode.firefox-exact", false);
 
 // 0 = blank, 1 = home (browser.startup.homepage), 2 = last visited page, 3 = resume previous browser session
 pref("browser.startup.page", 1);
 pref("browser.startup.homepage", "chrome://navigator-region/locale/region.properties");
 pref("browser.startup.homepage.count", 1);
 
 pref("browser.warnOnQuit", true);
 pref("browser.warnOnRestart", true);
diff -Nrup -U 8 seamonkey-2.53-comm-2_53_beta_01/suite/components/pref/content/pref-http.js seamonkey-2.53-comm-2_53_beta_01-OK/suite/components/pref/content/pref-http.js
--- seamonkey-2.53-comm-2_53_beta_01/suite/components/pref/content/pref-http.js	2019-12-31 03:14:14.000000000 +0300
+++ seamonkey-2.53-comm-2_53_beta_01-OK/suite/components/pref/content/pref-http.js	2020-02-20 03:39:30.000000000 +0300
@@ -3,16 +3,31 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 var gLightningUAold;
 
 function Startup()
 {
   CheckLightningUA();
+
+  var prefFirefoxExact = document.getElementById("general.useragent.compatMode.firefox-exact");
+  SetFirefoxExactEnabled(prefFirefoxExact.value);
+}
+
+function SetFirefoxExactEnabled(aEnable)
+{
+  EnableElementById("uaFirefoxCompat", !aEnable, false);
+
+  var prefLightningUA = document.getElementById("calendar.useragent.extra");
+  if (prefLightningUA.defaultValue)
+  {
+    var boxLightningUA = document.getElementById("uaLightningShow");
+    boxLightningUA.disabled = prefLightningUA.locked || aEnable;
+  }
 }
 
 // Lightning adds a UA token if calendar.useragent.extra is not empty.
 // Checkbox is visible if Lightning is installed and enabled.
 // Checkbox is checked if the pref contains any non-whitespace character.
 function CheckLightningUA()
 {
   var prefLightningUA = document.getElementById("calendar.useragent.extra");
diff -Nrup -U 8 seamonkey-2.53-comm-2_53_beta_01/suite/components/pref/content/pref-http.xul seamonkey-2.53-comm-2_53_beta_01-OK/suite/components/pref/content/pref-http.xul
--- seamonkey-2.53-comm-2_53_beta_01/suite/components/pref/content/pref-http.xul	2019-12-31 03:14:14.000000000 +0300
+++ seamonkey-2.53-comm-2_53_beta_01-OK/suite/components/pref/content/pref-http.xul	2020-02-19 23:52:08.529194850 +0300
@@ -14,16 +14,20 @@
                   name="network.http.version"
                   type="string"/>
       <preference id="network.http.proxy.version"
                   name="network.http.proxy.version"
                   type="string"/>
       <preference id="general.useragent.compatMode.firefox"
                   name="general.useragent.compatMode.firefox"
                   type="bool"/>
+      <preference id="general.useragent.compatMode.firefox-exact"
+                  name="general.useragent.compatMode.firefox-exact"
+                  type="bool"
+                  onchange="SetFirefoxExactEnabled(this.value);"/>
       <preference id="calendar.useragent.extra"
                   name="calendar.useragent.extra"
                   type="string"/>
     </preferences>
 
     <description>&prefPara;</description>
 
     <hbox align="start">
@@ -57,21 +61,33 @@
         </vbox>
       </groupbox>
     </hbox>
 
     <separator class="thin"/>
 
     <groupbox>
       <caption label="&prefUseragent.label;"/>
+      <radiogroup id="uaFirefoxExact"
+                  preference="general.useragent.compatMode.firefox-exact">
+        <radio value="true"
+               label="&prefFirefoxExact.label;"
+               accesskey="&prefFirefoxExact.accesskey;"/>
+        <radio value="false"
+               flex="1"
+               label="&prefAdvertiseSeaMonkey.label;"
+               accesskey="&prefAdvertiseSeaMonkey.accesskey;"/>
+      </radiogroup>
       <checkbox id="uaFirefoxCompat"
+                class="indent"
                 label="&prefFirefoxCompat.label;"
                 accesskey="&prefFirefoxCompat.accesskey;"
                 preference="general.useragent.compatMode.firefox"/>
       <checkbox id="uaLightningShow"
+                class="indent"
                 hidden="true"
                 label="&prefLightningShow.label;"
                 accesskey="&prefLightningShow.accesskey;"
                 oncommand="OnLightningChanged(this.checked);"/>
     </groupbox>
 
     <description>&prefCompatWarning;</description>
   </prefpane>
diff -Nrup -U 8 seamonkey-2.53-comm-2_53_beta_01/suite/locales/en-US/chrome/common/pref/pref-http.dtd seamonkey-2.53-comm-2_53_beta_01-OK/suite/locales/en-US/chrome/common/pref/pref-http.dtd
--- seamonkey-2.53-comm-2_53_beta_01/suite/locales/en-US/chrome/common/pref/pref-http.dtd	2019-12-31 03:14:14.000000000 +0300
+++ seamonkey-2.53-comm-2_53_beta_01-OK/suite/locales/en-US/chrome/common/pref/pref-http.dtd	2020-02-19 23:52:08.529194850 +0300
@@ -10,13 +10,17 @@
 <!ENTITY prefEnableHTTP10.label              "Use HTTP 1.0">
 <!ENTITY prefEnableHTTP10.accesskey          "U">
 <!ENTITY prefEnableHTTP10Proxy.accesskey     "S">
 <!ENTITY prefEnableHTTP11.label              "Use HTTP 1.1">
 <!ENTITY prefEnableHTTP11.accesskey          "E">
 <!ENTITY prefEnableHTTP11Proxy.accesskey     "T">
 <!ENTITY prefPara                            "HTTP connections may be fine-tuned using these options to enhance either performance or compatibility. Some proxy servers, for example, are known to require HTTP/1.0 (see the release notes for details).">
 <!ENTITY prefUseragent.label                 "User Agent String">
+<!ENTITY prefFirefoxExact.label              "Look exactly as Firefox">
+<!ENTITY prefFirefoxExact.accesskey          "A">
+<!ENTITY prefAdvertiseSeaMonkey.label        "Advertise SeaMonkey">
+<!ENTITY prefAdvertiseSeaMonkey.accesskey    "M">
 <!ENTITY prefFirefoxCompat.label             "Advertise Firefox compatibility">
 <!ENTITY prefFirefoxCompat.accesskey         "F">
 <!ENTITY prefLightningShow.label             "Advertise Lightning installation">
 <!ENTITY prefLightningShow.accesskey         "L">
 <!ENTITY prefCompatWarning                   "WARNING: disabling these settings may result in websites or services not working properly.">
