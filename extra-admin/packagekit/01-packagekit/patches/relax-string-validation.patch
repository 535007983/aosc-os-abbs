From 09584a45684810ea15c4127be70da277ad8afeb5 Mon Sep 17 00:00:00 2001
From: Richard Hughes <richard@hughsie.com>
Date: Wed, 16 Dec 2015 11:57:06 +0000
Subject: [PATCH] Relax validation performed on input strings passed to
 backends

This breaks more often than not these days. Filenames can contain special
chars like "'", and UTF-8 filenames are not some crazy concept anymore.

If a backend is spawning a process and not already assuming that user-input is
hostile then it already has huge problems even without this patch.

Fixes https://bugzilla.gnome.org/show_bug.cgi?id=759513
---
 src/pk-self-test.c   |  4 ++--
 src/pk-transaction.c | 45 +++++++--------------------------------------
 2 files changed, 9 insertions(+), 40 deletions(-)

diff --git a/src/pk-self-test.c b/src/pk-self-test.c
index b76cd4d..53d4ee4 100644
--- a/src/pk-self-test.c
+++ b/src/pk-self-test.c
@@ -749,7 +749,7 @@ pk_test_transaction_func (void)
 	g_assert (transaction != NULL);
 
 	/* validate incorrect text */
-	ret = pk_transaction_strvalidate ("richard$hughes", &error);
+	ret = pk_transaction_strvalidate ("richard$\xffhughes", &error);
 	g_assert_error (error, PK_TRANSACTION_ERROR, PK_TRANSACTION_ERROR_INPUT_INVALID);
 	g_assert (!ret);
 	g_clear_error (&error);
@@ -1456,9 +1456,9 @@ main (int argc, char **argv)
 #endif
 
 	/* components */
+	g_test_add_func ("/packagekit/transaction", pk_test_transaction_func);
 	g_test_add_func ("/packagekit/dbus", pk_test_dbus_func);
 	g_test_add_func ("/packagekit/spawn", pk_test_spawn_func);
-	g_test_add_func ("/packagekit/transaction", pk_test_transaction_func);
 	g_test_add_func ("/packagekit/scheduler", pk_test_scheduler_func);
 	g_test_add_func ("/packagekit/scheduler-parallel", pk_test_scheduler_parallel_func);
 	g_test_add_func ("/packagekit/transaction-db", pk_test_transaction_db_func);
diff --git a/src/pk-transaction.c b/src/pk-transaction.c
index 55aa86f..a589f33 100644
--- a/src/pk-transaction.c
+++ b/src/pk-transaction.c
@@ -2152,35 +2152,6 @@ pk_transaction_finished_idle_cb (PkTransaction *transaction)
 }
 
 /**
- * pk_transaction_strvalidate_char:
- * @item: A single char to test
- *
- * Tests a char to see if it may be dangerous.
- *
- * Return value: %TRUE if the char is valid
- **/
-static gboolean
-pk_transaction_strvalidate_char (gchar item)
-{
-	switch (item) {
-	case '$':
-	case '`':
-	case '\'':
-	case '"':
-	case '^':
-	case '[':
-	case ']':
-	case '{':
-	case '}':
-	case '\\':
-	case '<':
-	case '>':
-		return FALSE;
-	}
-	return TRUE;
-}
-
-/**
  * pk_transaction_strvalidate:
  * @text: The text to check for validity
  *
@@ -2191,7 +2162,6 @@ pk_transaction_strvalidate_char (gchar item)
 gboolean
 pk_transaction_strvalidate (const gchar *text, GError **error)
 {
-	guint i;
 	guint length;
 
 	/* maximum size is 1024 */
@@ -2202,14 +2172,13 @@ pk_transaction_strvalidate (const gchar *text, GError **error)
 		return FALSE;
 	}
 
-	for (i = 0; i < length; i++) {
-		if (pk_transaction_strvalidate_char (text[i]) == FALSE) {
-			g_set_error (error,
-				     PK_TRANSACTION_ERROR,
-				     PK_TRANSACTION_ERROR_INPUT_INVALID,
-				     "Invalid input passed to daemon: char '%c' in text!", text[i]);
-			return FALSE;
-		}
+	/* just check for valid UTF-8 */
+	if (!g_utf8_validate (text, -1, NULL)) {
+		g_set_error (error,
+			     PK_TRANSACTION_ERROR,
+			     PK_TRANSACTION_ERROR_INPUT_INVALID,
+			     "Invalid input passed to daemon: %s", text);
+		return FALSE;
 	}
 	return TRUE;
 }
