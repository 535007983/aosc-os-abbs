Description: Compatibility fixes for SuiteSparse 4.4
Author: SÃ©bastien Villemot <sebastien@debian.org>
Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=793762
Applied-Upstream: 0.3.0
Last-Update: 2015-09-26
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/operations/external/matting-levin.c
+++ b/operations/external/matting-levin.c
@@ -848,8 +848,8 @@ matting_sparse_new (guint cols, guint ro
   sparse_t *s = g_new (sparse_t, 1);
   s->columns  = cols;
   s->rows     = rows;
-  s->col_idx  = g_new  (UF_long, cols + 1);
-  s->row_idx  = g_new  (UF_long, elems);
+  s->col_idx  = g_new  (SuiteSparse_long, cols + 1);
+  s->row_idx  = g_new  (SuiteSparse_long, elems);
   s->values   = g_new0 (gdouble, elems);
 
   return s;
@@ -948,7 +948,7 @@ matting_get_laplacian (const gdouble
             image_elems  = roi->width * roi->height,
             i, j, k, x, y,
             status;
-  UF_long  *trip_col,
+  SuiteSparse_long  *trip_col,
            *trip_row;
   glong     trip_nz = 0,
             trip_cursor = 0,
@@ -979,8 +979,8 @@ matting_get_laplacian (const gdouble
   trip_nz   = trip_masked * window_elems * window_elems;
   trip_nz  += image_elems; // Sparse diagonal and row summing at conclusion
 
-  trip_col  = g_new  (UF_long, trip_nz);
-  trip_row  = g_new  (UF_long, trip_nz);
+  trip_col  = g_new  (SuiteSparse_long, trip_nz);
+  trip_row  = g_new  (SuiteSparse_long, trip_nz);
   trip_val  = g_new0 (gdouble, trip_nz);
 
   /* Compute the contribution of each pixel in the image to the laplacian */
@@ -1066,7 +1066,7 @@ matting_get_laplacian (const gdouble
           for (y = 0; y < window_elems; ++y)
             for (x = 0; x < window_elems; ++x)
               {
-                UF_long yx = y % diameter,
+                SuiteSparse_long yx = y % diameter,
                         yy = y / diameter,
                         xx = x % diameter,
                         xy = x / diameter;
