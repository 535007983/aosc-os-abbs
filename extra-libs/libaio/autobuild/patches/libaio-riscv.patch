diff -Naur libaio-0.3.110-old/src/libaio.h libaio-0.3.110/src/libaio.h
--- libaio-0.3.110-old/src/libaio.h	2014-01-25 00:01:02.000000000 +0800
+++ libaio-0.3.110/src/libaio.h	2018-02-23 20:40:55.000000000 +0800
@@ -52,14 +52,15 @@
 /* little endian, 32 bits */
 #if defined(__i386__) || (defined(__arm__) && !defined(__ARMEB__)) || \
     defined(__sh__) || defined(__bfin__) || defined(__MIPSEL__) || \
-    defined(__cris__)
+    defined(__cris__) || (defined(__riscv) && __riscv_xlen == 32)
 #define PADDED(x, y)	x; unsigned y
 #define PADDEDptr(x, y)	x; unsigned y
 #define PADDEDul(x, y)	unsigned long x; unsigned y
 
 /* little endian, 64 bits */
 #elif defined(__ia64__) || defined(__x86_64__) || defined(__alpha__) || \
-      (defined(__aarch64__) && defined(__AARCH64EL__))
+      (defined(__aarch64__) && defined(__AARCH64EL__)) || \
+      (defined(__riscv) && __riscv_xlen == 64)
 #define PADDED(x, y)	x, y
 #define PADDEDptr(x, y)	x
 #define PADDEDul(x, y)	unsigned long x
diff -Naur libaio-0.3.110-old/src/syscall-riscv.h libaio-0.3.110/src/syscall-riscv.h
--- libaio-0.3.110-old/src/syscall-riscv.h	1970-01-01 08:00:00.000000000 +0800
+++ libaio-0.3.110/src/syscall-riscv.h	2018-02-23 20:41:03.000000000 +0800
@@ -0,0 +1,96 @@
+/*
+ * Syscall definition of RISC-V platform.
+ *
+ * Copyright (C) 2018 Icenowy Zheng <icenowy@aosc.io>
+ *
+ * Based on syscall-arm64.h.
+ */
+
+#define __NR_io_setup			0
+#define __NR_io_destroy			1
+#define __NR_io_submit			2
+#define __NR_io_cancel			3
+#define __NR_io_getevents		4
+
+#define __sys2(x) #x
+#define __sys1(x) __sys2(x)
+
+#define __SYS_REG(name) register long __sysreg __asm__("a7") = __NR_##name;
+#define __SYS_REG_LIST(regs...) "r" (__sysreg) , ##regs
+#define __syscall(name) "scall"
+
+#define io_syscall1(type,fname,sname,type1,arg1)			\
+type fname(type1 arg1) {						\
+  __SYS_REG(sname)							\
+  register long __a0 __asm__("a0") = (long)arg1;			\
+  register long __res_a0 __asm__("a0");					\
+  __asm__ __volatile__ (						\
+  __syscall(sname)							\
+	: "=r" (__res_a0)						\
+	: __SYS_REG_LIST( "0" (__a0) )					\
+	: "memory" );							\
+  return (type) __res_a0;						\
+}
+
+#define io_syscall2(type,fname,sname,type1,arg1,type2,arg2)		\
+type fname(type1 arg1,type2 arg2) {					\
+  __SYS_REG(sname)							\
+  register long __a0 __asm__("a0") = (long)arg1;			\
+  register long __a1 __asm__("a1") = (long)arg2;			\
+  register long __res_a0 __asm__("a0");					\
+  __asm__ __volatile__ (						\
+  __syscall(sname)							\
+	: "=r" (__res_a0)						\
+	: __SYS_REG_LIST( "0" (__a0), "r" (__a1) )			\
+	: "memory" );							\
+  return (type) __res_a0;						\
+}
+
+#define io_syscall3(type,fname,sname,type1,arg1,type2,arg2,type3,arg3)	\
+type fname(type1 arg1,type2 arg2,type3 arg3) {				\
+  __SYS_REG(sname)							\
+  register long __a0 __asm__("a0") = (long)arg1;			\
+  register long __a1 __asm__("a1") = (long)arg2;			\
+  register long __a2 __asm__("a2") = (long)arg3;			\
+  register long __res_a0 __asm__("a0");					\
+  __asm__ __volatile__ (						\
+  __syscall(sname)							\
+	: "=r" (__res_a0)						\
+	: __SYS_REG_LIST( "0" (__a0), "r" (__a1), "r" (__a2) )		\
+	: "memory" );							\
+  return (type) __res_a0;						\
+}
+
+#define io_syscall4(type,fname,sname,type1,arg1,type2,arg2,type3,arg3,type4,arg4)\
+type fname(type1 arg1, type2 arg2, type3 arg3, type4 arg4) {		\
+  __SYS_REG(sname)							\
+  register long __a0 __asm__("a0") = (long)arg1;			\
+  register long __a1 __asm__("a1") = (long)arg2;			\
+  register long __a2 __asm__("a2") = (long)arg3;			\
+  register long __a3 __asm__("a3") = (long)arg4;			\
+  register long __res_a0 __asm__("a0");					\
+  __asm__ __volatile__ (						\
+  __syscall(sname)							\
+	: "=r" (__res_a0)						\
+	: __SYS_REG_LIST( "0" (__a0), "r" (__a1), "r" (__a2), "r" (__a3) ) \
+	: "memory" );							\
+  return (type) __res_a0;						\
+}
+
+#define io_syscall5(type,fname,sname,type1,arg1,type2,arg2,type3,arg3,type4,arg4,type5,arg5)	\
+type fname(type1 arg1, type2 arg2, type3 arg3, type4 arg4, type5 arg5) {\
+  __SYS_REG(sname)							\
+  register long __a0 __asm__("a0") = (long)arg1;			\
+  register long __a1 __asm__("a1") = (long)arg2;			\
+  register long __a2 __asm__("a2") = (long)arg3;			\
+  register long __a3 __asm__("a3") = (long)arg4;			\
+  register long __a4 __asm__("a4") = (long)arg5;			\
+  register long __res_a0 __asm__("a0");					\
+  __asm__ __volatile__ (						\
+  __syscall(sname)							\
+	: "=r" (__res_a0)						\
+	: __SYS_REG_LIST( "0" (__a0), "r" (__a1), "r" (__a2),		\
+			  "r" (__a3), "r" (__a4) )			\
+	: "memory" );							\
+  return (type) __res_a0;						\
+}
diff -Naur libaio-0.3.110-old/src/syscall.h libaio-0.3.110/src/syscall.h
--- libaio-0.3.110-old/src/syscall.h	2014-01-25 00:01:02.000000000 +0800
+++ libaio-0.3.110/src/syscall.h	2018-02-23 20:41:03.000000000 +0800
@@ -28,6 +28,8 @@
 #include "syscall-sparc.h"
 #elif defined(__aarch64__)
 #include "syscall-arm64.h"
+#elif defined(__riscv)
+#include "syscall-riscv.h"
 #else
 #warning "using generic syscall method"
 #include "syscall-generic.h"
