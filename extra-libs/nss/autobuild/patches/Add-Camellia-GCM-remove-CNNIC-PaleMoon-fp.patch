diff -Naur a/nss/lib/ckfw/builtins/certdata.txt b/nss/lib/ckfw/builtins/certdata.txt
--- a/nss/lib/ckfw/builtins/certdata.txt	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/ckfw/builtins/certdata.txt	2016-03-04 19:30:30.661642543 -0700
@@ -12227,9 +12227,9 @@
 CKA_SERIAL_NUMBER MULTILINE_OCTAL
 \002\004\111\063\000\001
 END
-CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NSS_TRUSTED_DELEGATOR
-CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NSS_MUST_VERIFY_TRUST
-CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NSS_MUST_VERIFY_TRUST
+CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NSS_NOT_TRUSTED
+CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NSS_NOT_TRUSTED
+CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NSS_NOT_TRUSTED
 CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE
 
 #
diff -Naur a/nss/lib/pk11wrap/debug_module.c b/nss/lib/pk11wrap/debug_module.c
--- a/nss/lib/pk11wrap/debug_module.c	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/pk11wrap/debug_module.c	2016-03-04 19:30:30.661642543 -0700
@@ -370,6 +370,7 @@
     CASE(CKM_CAMELLIA_KEY_GEN);
     CASE(CKM_CAMELLIA_MAC);
     CASE(CKM_CAMELLIA_MAC_GENERAL);
+    CASE(CKM_CAMELLIA_GCM);
     CASE(CKM_CDMF_CBC);
     CASE(CKM_CDMF_CBC_PAD);
     CASE(CKM_CDMF_ECB);
diff -Naur a/nss/lib/pk11wrap/pk11mech.c b/nss/lib/pk11wrap/pk11mech.c
--- a/nss/lib/pk11wrap/pk11mech.c	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/pk11wrap/pk11mech.c	2016-03-04 19:30:30.661642543 -0700
@@ -218,6 +218,7 @@
     case CKM_CAMELLIA_MAC_GENERAL:
     case CKM_CAMELLIA_CBC_PAD:
     case CKM_CAMELLIA_KEY_GEN:
+    case CKM_CAMELLIA_GCM:
 	return CKK_CAMELLIA;
     case CKM_AES_ECB:
     case CKM_AES_CBC:
@@ -430,6 +431,7 @@
     case CKM_CAMELLIA_MAC_GENERAL:
     case CKM_CAMELLIA_CBC_PAD:
     case CKM_CAMELLIA_KEY_GEN:
+    case CKM_CAMELLIA_GCM:
 	return CKM_CAMELLIA_KEY_GEN;
     case CKM_AES_ECB:
     case CKM_AES_CBC:
diff -Naur a/nss/lib/pk11wrap/pk11slot.c b/nss/lib/pk11wrap/pk11slot.c
--- a/nss/lib/pk11wrap/pk11slot.c	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/pk11wrap/pk11slot.c	2016-03-04 19:30:30.661642543 -0700
@@ -833,6 +833,7 @@
 	return &pk11_seedSlotList;
     case CKM_CAMELLIA_CBC:
     case CKM_CAMELLIA_ECB:
+    case CKM_CAMELLIA_GCM:
 	return &pk11_camelliaSlotList;
     case CKM_AES_CBC:
     case CKM_AES_CCM:
diff -Naur a/nss/lib/softoken/pkcs11.c b/nss/lib/softoken/pkcs11.c
--- a/nss/lib/softoken/pkcs11.c	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/softoken/pkcs11.c	2016-03-04 19:30:30.661642543 -0700
@@ -363,6 +363,7 @@
      {CKM_CAMELLIA_MAC, 	{16, 32, CKF_SN_VR},            PR_TRUE},
      {CKM_CAMELLIA_MAC_GENERAL,	{16, 32, CKF_SN_VR},            PR_TRUE},
      {CKM_CAMELLIA_CBC_PAD,	{16, 32, CKF_EN_DE_WR_UN},      PR_TRUE},
+     {CKM_CAMELLIA_GCM, 	{16, 32, CKF_EN_DE},            PR_TRUE},
      /* ------------------------- SEED Operations --------------------------- */
      {CKM_SEED_KEY_GEN,		{16, 16, CKF_GENERATE},		PR_TRUE},
      {CKM_SEED_ECB,		{16, 16, CKF_EN_DE_WR_UN},	PR_TRUE},
diff -Naur a/nss/lib/ssl/ssl3con.c b/nss/lib/ssl/ssl3con.c
--- a/nss/lib/ssl/ssl3con.c	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/ssl/ssl3con.c	2016-03-04 19:30:30.664975883 -0700
@@ -73,11 +73,11 @@
 			     int maxOutputLen, const unsigned char *input,
 			     int inputLen);
 #ifndef NO_PKCS11_BYPASS
-static SECStatus ssl3_AESGCMBypass(ssl3KeyMaterial *keys, PRBool doDecrypt,
+static SECStatus ssl3_CipherGCMBypass(ssl3KeyMaterial *keys, PRBool doDecrypt,
 				   unsigned char *out, int *outlen, int maxout,
 				   const unsigned char *in, int inlen,
 				   const unsigned char *additionalData,
-				   int additionalDataLen);
+				   int additionalDataLen, SSLCipherAlgorithm calg);
 #endif
 
 #define MAX_SEND_BUF_LENGTH 32000 /* watch for 16-bit integer overflow */
@@ -97,6 +97,8 @@
 #ifndef NSS_DISABLE_ECC
  { TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, SSL_ALLOWED, PR_TRUE, PR_FALSE},
  { TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,   SSL_ALLOWED, PR_TRUE, PR_FALSE},
+ { TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256, SSL_ALLOWED, PR_FALSE, PR_FALSE},
+ { TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,   SSL_ALLOWED, PR_FALSE, PR_FALSE},
    /* TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA is out of order to work around
     * bug 946147.
     */
@@ -292,6 +294,7 @@
     {cipher_camellia_256, calg_camellia,    32,32, type_block, 16,16, 0, 0, SEC_OID_CAMELLIA_256_CBC},
     {cipher_seed,         calg_seed,        16,16, type_block, 16,16, 0, 0, SEC_OID_SEED_CBC},
     {cipher_aes_128_gcm,  calg_aes_gcm,     16,16, type_aead,   4, 0,16, 8, SEC_OID_AES_128_GCM},
+    {cipher_camellia_128_gcm, calg_camellia_gcm,    16,16, type_aead,   4, 0,16, 8, SEC_OID_CAMELLIA_128_GCM},
     {cipher_missing,      calg_null,         0, 0, type_stream, 0, 0, 0, 0, 0},
 };
 
@@ -418,6 +421,8 @@
     {TLS_RSA_WITH_AES_128_GCM_SHA256, cipher_aes_128_gcm, mac_aead, kea_rsa},
     {TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, cipher_aes_128_gcm, mac_aead, kea_ecdhe_rsa},
     {TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, cipher_aes_128_gcm, mac_aead, kea_ecdhe_ecdsa},
+    {TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256, cipher_camellia_128_gcm, mac_aead, kea_ecdhe_rsa},
+    {TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256, cipher_camellia_128_gcm, mac_aead, kea_ecdhe_ecdsa},
 
     {TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, cipher_aes_128_gcm, mac_aead, kea_dhe_dss},
     {TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, cipher_aes_128, hmac_sha256, kea_dhe_dss},
@@ -487,6 +492,7 @@
     { calg_camellia , CKM_CAMELLIA_CBC			},
     { calg_seed     , CKM_SEED_CBC			},
     { calg_aes_gcm  , CKM_AES_GCM			},
+    { calg_camellia_gcm , CKM_CAMELLIA_GCM      },
 /*  { calg_init     , (CK_MECHANISM_TYPE)0x7fffffffL    }  */
 };
 
@@ -527,6 +533,7 @@
     "Camellia-256",
     "SEED-CBC",
     "AES-128-GCM",
+    "Camellia-128-GCM",
     "missing"
 };
 
@@ -655,7 +662,9 @@
     case TLS_DHE_RSA_WITH_AES_256_CBC_SHA256:
     case TLS_RSA_WITH_AES_256_CBC_SHA256:
     case TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
+    case TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
     case TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
+    case TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
     case TLS_DHE_RSA_WITH_AES_128_CBC_SHA256:
     case TLS_RSA_WITH_AES_128_CBC_SHA256:
     case TLS_RSA_WITH_AES_128_GCM_SHA256:
@@ -1666,13 +1675,13 @@
 
     calg = cipher_def->calg;
 
-    if (calg == ssl_calg_aes_gcm) {
+    if (cipher_def->type == type_aead) {
 	pwSpec->encode = NULL;
 	pwSpec->decode = NULL;
 	pwSpec->destroy = NULL;
 	pwSpec->encodeContext = NULL;
 	pwSpec->decodeContext = NULL;
-	pwSpec->aead = ssl3_AESGCMBypass;
+	pwSpec->aead = ssl3_CipherGCMBypass;
 	ssl3_InitCompressionContext(pwSpec);
 	return SECSuccess;
     }
@@ -1887,7 +1896,7 @@
 }
 
 static SECStatus
-ssl3_AESGCM(ssl3KeyMaterial *keys,
+ssl3_CipherGCM(ssl3KeyMaterial *keys,
 	    PRBool doDecrypt,
 	    unsigned char *out,
 	    int *outlen,
@@ -1895,13 +1904,15 @@
 	    const unsigned char *in,
 	    int inlen,
 	    const unsigned char *additionalData,
-	    int additionalDataLen)
+	    int additionalDataLen,
+	    SSLCipherAlgorithm calg)
 {
     SECItem            param;
     SECStatus          rv = SECFailure;
     unsigned char      nonce[12];
     unsigned int       uOutLen;
     CK_GCM_PARAMS      gcmParams;
+    CK_MECHANISM_TYPE  mechanism;
 
     static const int   tagSize = 16;
     static const int   explicitNonceLen = 8;
@@ -1935,12 +1946,21 @@
     gcmParams.pAAD = (unsigned char *)additionalData;  /* const cast */
     gcmParams.ulAADLen = additionalDataLen;
     gcmParams.ulTagBits = tagSize * 8;
+    
+    switch (calg) {
+      case calg_aes_gcm:
+        mechanism = CKM_AES_GCM;
+        break;
+      case calg_camellia_gcm:
+        mechanism = CKM_CAMELLIA_GCM;
+        break;
+    }
 
     if (doDecrypt) {
-	rv = PK11_Decrypt(keys->write_key, CKM_AES_GCM, &param, out, &uOutLen,
+	rv = PK11_Decrypt(keys->write_key, mechanism, &param, out, &uOutLen,
 			  maxout, in, inlen);
     } else {
-	rv = PK11_Encrypt(keys->write_key, CKM_AES_GCM, &param, out, &uOutLen,
+	rv = PK11_Encrypt(keys->write_key, mechanism, &param, out, &uOutLen,
 			  maxout, in, inlen);
     }
     *outlen += (int) uOutLen;
@@ -1950,7 +1970,7 @@
 
 #ifndef NO_PKCS11_BYPASS
 static SECStatus
-ssl3_AESGCMBypass(ssl3KeyMaterial *keys,
+ssl3_CipherGCMBypass(ssl3KeyMaterial *keys,
 		  PRBool doDecrypt,
 		  unsigned char *out,
 		  int *outlen,
@@ -1958,12 +1978,12 @@
 		  const unsigned char *in,
 		  int inlen,
 		  const unsigned char *additionalData,
-		  int additionalDataLen)
+		  int additionalDataLen,
+		  SSLCipherAlgorithm calg)
 {
     SECStatus          rv = SECFailure;
     unsigned char      nonce[12];
     unsigned int       uOutLen;
-    AESContext        *cx;
     CK_GCM_PARAMS      gcmParams;
 
     static const int   tagSize = 16;
@@ -2001,8 +2021,28 @@
     gcmParams.ulAADLen = additionalDataLen;
     gcmParams.ulTagBits = tagSize * 8;
 
-    cx = (AESContext *)keys->cipher_context;
-    rv = AES_InitContext(cx, keys->write_key_item.data,
+    void *cx = keys->cipher_context;
+    BLapiInitContextFunc initFn = (BLapiInitContextFunc)NULL;
+    SSLCipher encode = (SSLCipher)NULL;
+    SSLCipher decode = (SSLCipher)NULL;
+    SSLDestroy destroy = (SSLDestroy)NULL;
+
+    switch (calg) {
+        case calg_aes_gcm:
+            initFn = (BLapiInitContextFunc)AES_InitContext;
+            encode  = (SSLCipher) AES_Encrypt;
+            decode  = (SSLCipher) AES_Decrypt;
+            destroy = (SSLDestroy) AES_DestroyContext;
+            break;
+        case calg_camellia_gcm:
+            initFn = (BLapiInitContextFunc)Camellia_InitContext;
+            encode  = (SSLCipher) Camellia_Encrypt;
+            decode  = (SSLCipher) Camellia_Decrypt;
+            destroy = (SSLDestroy) Camellia_DestroyContext;
+            break;
+    }
+
+    rv = (*initFn)(cx, keys->write_key_item.data,
 			 keys->write_key_item.len,
 			 (unsigned char *)&gcmParams, NSS_AES_GCM, !doDecrypt,
 			 AES_BLOCK_SIZE);
@@ -2010,11 +2050,11 @@
 	return rv;
     }
     if (doDecrypt) {
-	rv = AES_Decrypt(cx, out, &uOutLen, maxout, in, inlen);
+	rv = (*decode)(cx, out, &uOutLen, maxout, in, inlen);
     } else {
-	rv = AES_Encrypt(cx, out, &uOutLen, maxout, in, inlen);
+	rv = (*encode)(cx, out, &uOutLen, maxout, in, inlen);
     }
-    AES_DestroyContext(cx, PR_FALSE);
+    (*destroy)(cx, PR_FALSE);
     *outlen += (int) uOutLen;
 
     return rv;
@@ -2054,13 +2094,13 @@
     pwSpec->client.write_mac_context = NULL;
     pwSpec->server.write_mac_context = NULL;
 
-    if (calg == calg_aes_gcm) {
+    if (cipher_def->type == type_aead) {
 	pwSpec->encode = NULL;
 	pwSpec->decode = NULL;
 	pwSpec->destroy = NULL;
 	pwSpec->encodeContext = NULL;
 	pwSpec->decodeContext = NULL;
-	pwSpec->aead = ssl3_AESGCM;
+	pwSpec->aead = ssl3_CipherGCM;
 	return SECSuccess;
     }
 
@@ -2638,7 +2678,7 @@
 		&cipherBytes,                               /* out len */
 		wrBuf->space - headerLen,                   /* max out */
 		pIn, contentLen,                            /* input   */
-		pseudoHeader, pseudoHeaderLen);
+		pseudoHeader, pseudoHeaderLen, cipher_def->calg);
 	if (rv != SECSuccess) {
 	    PORT_SetError(SSL_ERROR_ENCRYPTION_FAILURE);
 	    return SECFailure;
@@ -12174,7 +12214,7 @@
 		plaintext->space,                 /* maxout */
 		cText->buf->buf,                  /* in */
 		cText->buf->len,                  /* inlen */
-		header, headerLen);
+		header, headerLen, cipher_def->calg);
 	if (rv != SECSuccess) {
 	    good = 0;
 	}
diff -Naur a/nss/lib/ssl/ssl3ecc.c b/nss/lib/ssl/ssl3ecc.c
--- a/nss/lib/ssl/ssl3ecc.c	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/ssl/ssl3ecc.c	2016-03-04 19:30:30.664975883 -0700
@@ -931,6 +931,7 @@
     TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
     TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
     TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
+    TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
     TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
     TLS_ECDHE_ECDSA_WITH_NULL_SHA,
     TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
@@ -942,6 +943,7 @@
     TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
     TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
     TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
+    TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,
     TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
     TLS_ECDHE_RSA_WITH_NULL_SHA,
     TLS_ECDHE_RSA_WITH_RC4_128_SHA,
@@ -954,6 +956,7 @@
     TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
     TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
     TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
+    TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
     TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
     TLS_ECDHE_ECDSA_WITH_NULL_SHA,
     TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
@@ -961,6 +964,7 @@
     TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
     TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
     TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
+    TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,
     TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
     TLS_ECDHE_RSA_WITH_NULL_SHA,
     TLS_ECDHE_RSA_WITH_RC4_128_SHA,
diff -Naur a/nss/lib/ssl/sslenum.c b/nss/lib/ssl/sslenum.c
--- a/nss/lib/ssl/sslenum.c	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/ssl/sslenum.c	2016-03-04 19:30:30.664975883 -0700
@@ -50,6 +50,8 @@
 #ifndef NSS_DISABLE_ECC
     TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
     TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
+    TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256,
+    TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256,
     /* TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA must appear before
      * TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA to work around bug 946147.
      */
diff -Naur a/nss/lib/ssl/sslimpl.h b/nss/lib/ssl/sslimpl.h
--- a/nss/lib/ssl/sslimpl.h	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/ssl/sslimpl.h	2016-03-04 19:30:30.664975883 -0700
@@ -50,6 +50,7 @@
 #define calg_camellia	ssl_calg_camellia
 #define calg_seed	ssl_calg_seed
 #define calg_aes_gcm    ssl_calg_aes_gcm
+#define calg_camellia_gcm    ssl_calg_camellia_gcm
 
 #define mac_null	ssl_mac_null
 #define mac_md5 	ssl_mac_md5
@@ -285,7 +286,7 @@
 } ssl3CipherSuiteCfg;
 
 #ifndef NSS_DISABLE_ECC
-#define ssl_V3_SUITES_IMPLEMENTED 64
+#define ssl_V3_SUITES_IMPLEMENTED 66
 #else
 #define ssl_V3_SUITES_IMPLEMENTED 40
 #endif /* NSS_DISABLE_ECC */
@@ -472,6 +473,7 @@
     cipher_camellia_256,
     cipher_seed,
     cipher_aes_128_gcm,
+    cipher_camellia_128_gcm,
     cipher_missing              /* reserved for no such supported cipher */
     /* This enum must match ssl3_cipherName[] in ssl3con.c.  */
 } SSL3BulkCipher;
@@ -534,7 +536,8 @@
 			       const unsigned char *in,
 			       int                  inlen,
 			       const unsigned char *additionalData,
-			       int                  additionalDataLen);
+			       int                  additionalDataLen,
+			       SSLCipherAlgorithm   calg);
 typedef SECStatus (*SSLCompressor)(void *               context,
                                    unsigned char *      out,
                                    int *                outlen,
diff -Naur a/nss/lib/ssl/sslinfo.c b/nss/lib/ssl/sslinfo.c
--- a/nss/lib/ssl/sslinfo.c	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/ssl/sslinfo.c	2016-03-04 19:30:30.664975883 -0700
@@ -148,6 +148,7 @@
 #define C_NULL  "NULL", calg_null
 #define C_SJ 	"SKIPJACK", calg_sj
 #define C_AESGCM "AES-GCM", calg_aes_gcm
+#define C_CAMELLIAGCM "CAMELLIA-GCM", calg_camellia_gcm
 
 #define B_256	256, 256, 256
 #define B_128	128, 128, 128
@@ -215,7 +216,9 @@
 #ifndef NSS_DISABLE_ECC
 /* ECC cipher suites */
 {0,CS(TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256), S_RSA, K_ECDHE, C_AESGCM, B_128, M_AEAD_128, 1, 0, 0 },
+{0,CS(TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256), S_RSA, K_ECDHE, C_AESGCM, B_128, M_AEAD_128, 1, 0, 0, },
 {0,CS(TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256), S_ECDSA, K_ECDHE, C_AESGCM, B_128, M_AEAD_128, 1, 0, 0 },
+{0,CS(TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256), S_ECDSA, K_ECDHE, C_AESGCM, B_128, M_AEAD_128, 1, 0, 0, },
 
 {0,CS(TLS_ECDH_ECDSA_WITH_NULL_SHA),          S_ECDSA, K_ECDH, C_NULL, B_0, M_SHA, 0, 0, 0 },
 {0,CS(TLS_ECDH_ECDSA_WITH_RC4_128_SHA),       S_ECDSA, K_ECDH, C_RC4, B_128, M_SHA, 0, 0, 0 },
diff -Naur a/nss/lib/ssl/sslproto.h b/nss/lib/ssl/sslproto.h
--- a/nss/lib/ssl/sslproto.h	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/ssl/sslproto.h	2016-03-04 19:30:30.664975883 -0700
@@ -260,6 +260,9 @@
 #define TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256   0xC02F
 #define TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256    0xC031
 
+#define TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 0xC086
+#define TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256   0xC08A
+
 /* Netscape "experimental" cipher suites. */
 #define SSL_RSA_OLDFIPS_WITH_3DES_EDE_CBC_SHA   0xffe0
 #define SSL_RSA_OLDFIPS_WITH_DES_CBC_SHA        0xffe1
diff -Naur a/nss/lib/ssl/sslt.h b/nss/lib/ssl/sslt.h
--- a/nss/lib/ssl/sslt.h	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/ssl/sslt.h	2016-03-04 19:30:30.664975883 -0700
@@ -104,7 +104,8 @@
     ssl_calg_aes      = 7,
     ssl_calg_camellia = 8,
     ssl_calg_seed     = 9,
-    ssl_calg_aes_gcm  = 10
+    ssl_calg_aes_gcm  = 10,
+    ssl_calg_camellia_gcm = 11
 } SSLCipherAlgorithm;
 
 typedef enum { 
diff -Naur a/nss/lib/util/pkcs11t.h b/nss/lib/util/pkcs11t.h
--- a/nss/lib/util/pkcs11t.h	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/util/pkcs11t.h	2016-03-04 19:30:30.664975883 -0700
@@ -915,6 +915,7 @@
 #define CKM_CAMELLIA_CBC_PAD           0x00000555
 #define CKM_CAMELLIA_ECB_ENCRYPT_DATA  0x00000556
 #define CKM_CAMELLIA_CBC_ENCRYPT_DATA  0x00000557
+#define CKM_CAMELLIA_GCM               0x00000558
 
 #define CKM_SEED_KEY_GEN	       0x00000650    
 #define CKM_SEED_ECB		       0x00000651
diff -Naur a/nss/lib/util/secoidt.h b/nss/lib/util/secoidt.h
--- a/nss/lib/util/secoidt.h	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/lib/util/secoidt.h	2016-03-04 19:33:45.068728304 -0700
@@ -479,6 +479,10 @@
     SEC_OID_TLS_DH_ANON_EXPORT         = 344,
     SEC_OID_APPLY_SSL_POLICY           = 345,
 
+    /* Additional Camellia OIDs from PaleMoon */
+    
+    SEC_OID_CAMELLIA_128_GCM           = 346,
+
     SEC_OID_TOTAL
 } SECOidTag;
 
diff -Naur a/nss/tests/ssl/sslcov.txt b/nss/tests/ssl/sslcov.txt
--- a/nss/tests/ssl/sslcov.txt	2016-02-26 02:49:58.000000000 -0700
+++ b/nss/tests/ssl/sslcov.txt	2016-03-04 19:30:30.664975883 -0700
@@ -170,3 +170,6 @@
    ECC   TLS12  :C027 TLS12_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    ECC   TLS12  :C02B TLS12_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    ECC   TLS12  :C02F TLS12_ECDHE_RSA_WITH_AES_128_GCM_SHA256
+   ECC   TLS12  :C086 TLS12_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
+   ECC   TLS12  :C08A TLS12_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
+   
