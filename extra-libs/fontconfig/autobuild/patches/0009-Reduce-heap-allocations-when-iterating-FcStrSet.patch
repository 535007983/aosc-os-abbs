From 8da1728b50f81a1bcf44b8e9438a96106e01f91b Mon Sep 17 00:00:00 2001
From: Michal Srb <michalsrb@gmail.com>
Date: Fri, 24 Feb 2017 21:08:00 +0200
Subject: [PATCH 09/13] Reduce heap allocations when iterating FcStrSet.

To iterate FcStrSet was has to create FcStrList (iterator) using FcStrListCreate function and destroy it at the end using FcStrListDone function. FcStrList is allocated on heap, however in many cases it is needed only in the scope of one function and could be easily on stack.

This commit splits the (de-)initialization of FcStrList away from (de)allocation and introduces FcStrListInitialize and FcStrListRelease functions. Then it converts all uses of FcStrListCreate and FcStrListDone to them where possible.
This also lets us remove some fail paths because FcStrListInitialize unlike FcStrListCreate can not fail.
---
 src/fccache.c |  46 +++++++++------------
 src/fccfg.c   |  55 ++++++++++++-------------
 src/fcint.h   |   6 +++
 src/fclang.c  | 126 ++++++++++++++++++++++++++++------------------------------
 src/fcstr.c   |  20 ++++++++--
 5 files changed, 128 insertions(+), 125 deletions(-)

diff --git a/src/fccache.c b/src/fccache.c
index 6f3c68a..92d2779 100644
--- a/src/fccache.c
+++ b/src/fccache.c
@@ -124,17 +124,15 @@ FcDirCacheUnlink (const FcChar8 *dir, FcConfig *config)
 {
     FcChar8	*cache_hashed = NULL;
     FcChar8	cache_base[CACHEBASE_LEN];
-    FcStrList	*list;
+    FcStrList	list;
     FcChar8	*cache_dir;
     const FcChar8 *sysroot = FcConfigGetSysRoot (config);
 
     FcDirCacheBasename (dir, cache_base);
 
-    list = FcStrListCreate (config->cacheDirs);
-    if (!list)
-        return FcFalse;
-	
-    while ((cache_dir = FcStrListNext (list)))
+    FcStrListInitialize (config->cacheDirs, &list);
+
+    while ((cache_dir = FcStrListNext (&list)))
     {
 	if (sysroot)
 	    cache_hashed = FcStrBuildFilename (sysroot, cache_dir, cache_base, NULL);
@@ -145,7 +143,7 @@ FcDirCacheUnlink (const FcChar8 *dir, FcConfig *config)
 	(void) unlink ((char *) cache_hashed);
 	FcStrFree (cache_hashed);
     }
-    FcStrListDone (list);
+    FcStrListRelease (&list);
     /* return FcFalse if something went wrong */
     if (cache_dir)
 	return FcFalse;
@@ -187,7 +185,7 @@ FcDirCacheProcess (FcConfig *config, const FcChar8 *dir,
 {
     int		fd = -1;
     FcChar8	cache_base[CACHEBASE_LEN];
-    FcStrList	*list;
+    FcStrList	list;
     FcChar8	*cache_dir, *d;
     struct stat file_stat, dir_stat;
     FcBool	ret = FcFalse;
@@ -206,11 +204,9 @@ FcDirCacheProcess (FcConfig *config, const FcChar8 *dir,
 
     FcDirCacheBasename (dir, cache_base);
 
-    list = FcStrListCreate (config->cacheDirs);
-    if (!list)
-        return FcFalse;
-	
-    while ((cache_dir = FcStrListNext (list)))
+    FcStrListInitialize (config->cacheDirs, &list);
+
+    while ((cache_dir = FcStrListNext (&list)))
     {
         FcChar8	*cache_hashed;
 
@@ -235,7 +231,7 @@ FcDirCacheProcess (FcConfig *config, const FcChar8 *dir,
 	}
     	FcStrFree (cache_hashed);
     }
-    FcStrListDone (list);
+    FcStrListRelease (&list);
 
     return ret;
 }
@@ -986,7 +982,7 @@ FcDirCacheWrite (FcCache *cache, FcConfig *config)
     FcChar8	    *cache_hashed;
     int 	    fd;
     FcAtomic 	    *atomic;
-    FcStrList	    *list;
+    FcStrList	    list;
     FcChar8	    *cache_dir = NULL;
     FcChar8	    *test_dir, *d = NULL;
     FcCacheSkip     *skip;
@@ -999,10 +995,8 @@ FcDirCacheWrite (FcCache *cache, FcConfig *config)
      * Write it to the first directory in the list which is writable
      */
 
-    list = FcStrListCreate (config->cacheDirs);
-    if (!list)
-	return FcFalse;
-    while ((test_dir = FcStrListNext (list)))
+    FcStrListInitialize (config->cacheDirs, &list);
+    while ((test_dir = FcStrListNext (&list)))
     {
 	if (d)
 	    FcStrFree (d);
@@ -1044,7 +1038,7 @@ FcDirCacheWrite (FcCache *cache, FcConfig *config)
     }
     if (d)
 	FcStrFree (d);
-    FcStrListDone (list);
+    FcStrListRelease (&list);
     if (!cache_dir)
 	return FcFalse;
 
@@ -1240,17 +1234,15 @@ FcDirCacheLock (const FcChar8 *dir,
 {
     FcChar8 *cache_hashed = NULL;
     FcChar8 cache_base[CACHEBASE_LEN];
-    FcStrList *list;
+    FcStrList list;
     FcChar8 *cache_dir;
     const FcChar8 *sysroot = FcConfigGetSysRoot (config);
     int fd = -1;
 
     FcDirCacheBasename (dir, cache_base);
-    list = FcStrListCreate (config->cacheDirs);
-    if (!list)
-	return -1;
+    FcStrListInitialize (config->cacheDirs, &list);
 
-    while ((cache_dir = FcStrListNext (list)))
+    while ((cache_dir = FcStrListNext (&list)))
     {
 	if (sysroot)
 	    cache_hashed = FcStrBuildFilename (sysroot, cache_dir, cache_base, NULL);
@@ -1280,10 +1272,10 @@ FcDirCacheLock (const FcChar8 *dir,
 	    break;
 	}
     }
-    FcStrListDone (list);
+    FcStrListRelease (&list);
     return fd;
 bail:
-    FcStrListDone (list);
+    FcStrListRelease (&list);
     if (fd != -1)
 	close (fd);
     return -1;
diff --git a/src/fccfg.c b/src/fccfg.c
index 9f8ee7c..02fbdfa 100644
--- a/src/fccfg.c
+++ b/src/fccfg.c
@@ -153,22 +153,22 @@ bail0:
 static FcFileTime
 FcConfigNewestFile (FcStrSet *files)
 {
-    FcStrList	    *list = FcStrListCreate (files);
+    FcStrList	    list;
     FcFileTime	    newest = { 0, FcFalse };
     FcChar8	    *file;
     struct  stat    statb;
 
-    if (list)
-    {
-	while ((file = FcStrListNext (list)))
-	    if (FcStat (file, &statb) == 0)
-		if (!newest.set || statb.st_mtime - newest.time > 0)
-		{
-		    newest.set = FcTrue;
-		    newest.time = statb.st_mtime;
-		}
-	FcStrListDone (list);
-    }
+    FcStrListInitialize (files, &list);
+
+    while ((file = FcStrListNext (&list)))
+	if (FcStat (file, &statb) == 0)
+	    if (!newest.set || statb.st_mtime - newest.time > 0)
+	    {
+		newest.set = FcTrue;
+		newest.time = statb.st_mtime;
+	    }
+    FcStrListRelease (&list);
+
     return newest;
 }
 
@@ -365,15 +365,13 @@ FcConfigAddCache (FcConfig *config, FcCache *cache,
 static FcBool
 FcConfigAddDirList (FcConfig *config, FcSetName set, FcStrSet *dirSet)
 {
-    FcStrList	    *dirlist;
+    FcStrList	    dirlist;
     FcChar8	    *dir;
     FcCache	    *cache;
 
-    dirlist = FcStrListCreate (dirSet);
-    if (!dirlist)
-        return FcFalse;
-	
-    while ((dir = FcStrListNext (dirlist)))
+    FcStrListInitialize (dirSet, &dirlist);
+
+    while ((dir = FcStrListNext (&dirlist)))
     {
 	if (FcDebug () & FC_DBG_FONTSET)
 	    printf ("adding fonts from %s\n", dir);
@@ -383,7 +381,7 @@ FcConfigAddDirList (FcConfig *config, FcSetName set, FcStrSet *dirSet)
 	FcConfigAddCache (config, cache, set, dirSet);
 	FcDirCacheUnload (cache);
     }
-    FcStrListDone (dirlist);
+    FcStrListRelease (&dirlist);
     return FcTrue;
 }
 
@@ -1541,14 +1539,15 @@ FcConfigSubstituteWithPat (FcConfig    *config,
 	strs = FcGetDefaultLangs ();
 	if (strs)
 	{
-	    FcStrList *l = FcStrListCreate (strs);
+	    FcStrList l;
 	    FcChar8 *lang;
 	    FcValue v;
 	    FcLangSet *lsund = FcLangSetCreate ();
 
+	    FcStrListInitialize (strs, &l);
 	    FcLangSetAdd (lsund, (const FcChar8 *)"und");
 	    FcStrSetDestroy (strs);
-	    while (l && (lang = FcStrListNext (l)))
+	    while ((lang = FcStrListNext (&l)))
 	    {
 		FcPatternElt *e = FcPatternObjectFindElt (p, FC_LANG_OBJECT);
 
@@ -1588,7 +1587,7 @@ FcConfigSubstituteWithPat (FcConfig    *config,
 		FcPatternObjectAddWithBinding (p, FC_LANG_OBJECT, v, FcValueBindingWeak, FcTrue);
 	    }
 	bail_lang:
-	    FcStrListDone (l);
+	    FcStrListRelease (&l);
 	    FcLangSetDestroy (lsund);
 	}
 	if (FcPatternObjectGet (p, FC_PRGNAME_OBJECT, 0, &v) == FcResultNoMatch)
@@ -2195,7 +2194,7 @@ FcConfigAppFontAddFile (FcConfig    *config,
 {
     FcFontSet	*set;
     FcStrSet	*subdirs;
-    FcStrList	*sublist;
+    FcStrList	sublist;
     FcChar8	*subdir;
 
     if (!config)
@@ -2226,14 +2225,12 @@ FcConfigAppFontAddFile (FcConfig    *config,
 	FcStrSetDestroy (subdirs);
 	return FcFalse;
     }
-    if ((sublist = FcStrListCreate (subdirs)))
+    FcStrListInitialize (subdirs, &sublist);
+    while ((subdir = FcStrListNext (&sublist)))
     {
-	while ((subdir = FcStrListNext (sublist)))
-	{
-	    FcConfigAppFontAddDir (config, subdir);
-	}
-	FcStrListDone (sublist);
+	FcConfigAppFontAddDir (config, subdir);
     }
+    FcStrListRelease (&sublist);
     FcStrSetDestroy (subdirs);
     return FcTrue;
 }
diff --git a/src/fcint.h b/src/fcint.h
index 95862f9..fc43031 100644
--- a/src/fcint.h
+++ b/src/fcint.h
@@ -1234,6 +1234,12 @@ FcStrSerializeAlloc (FcSerialize *serialize, const FcChar8 *str);
 FcPrivate FcChar8 *
 FcStrSerialize (FcSerialize *serialize, const FcChar8 *str);
 
+FcPrivate void
+FcStrListInitialize (FcStrSet *set, FcStrList *list);
+
+FcPrivate void
+FcStrListRelease (FcStrList *list);
+
 /* fcobjs.c */
 
 FcPrivate void
diff --git a/src/fclang.c b/src/fclang.c
index b1fd1bc..2ebaf1f 100644
--- a/src/fclang.c
+++ b/src/fclang.c
@@ -479,24 +479,22 @@ FcLangSetCopy (const FcLangSet *ls)
     memcpy (new->map, ls->map, FC_MIN (sizeof (new->map), ls->map_size * sizeof (ls->map[0])));
     if (ls->extra)
     {
-	FcStrList	*list;
+	FcStrList	list;
 	FcChar8		*extra;
 	
 	new->extra = FcStrSetCreate ();
 	if (!new->extra)
 	    goto bail1;
 
-	list = FcStrListCreate (ls->extra);	
-	if (!list)
-	    goto bail1;
-	
-	while ((extra = FcStrListNext (list)))
+	FcStrListInitialize (ls->extra, &list);
+
+	while ((extra = FcStrListNext (&list)))
 	    if (!FcStrSetAdd (new->extra, extra))
 	    {
-		FcStrListDone (list);
+		FcStrListRelease (&list);
 		goto bail1;
 	    }
-	FcStrListDone (list);
+	FcStrListRelease (&list);
     }
     return new;
 bail1:
@@ -629,19 +627,19 @@ FcLangSetHasLang (const FcLangSet *ls, const FcChar8 *lang)
     }
     if (ls->extra)
     {
-	FcStrList	*list = FcStrListCreate (ls->extra);
+	FcStrList	list;
 	FcChar8		*extra;
+
+	FcStrListInitialize (ls->extra, &list);
 	
-	if (list)
+	while (best > FcLangEqual && (extra = FcStrListNext (&list)))
 	{
-	    while (best > FcLangEqual && (extra = FcStrListNext (list)))
-	    {
-		r = FcLangCompare (lang, extra);
-		if (r < best)
-		    best = r;
-	    }
-	    FcStrListDone (list);
+	    r = FcLangCompare (lang, extra);
+	    if (r < best)
+		best = r;
 	}
+	FcStrListRelease (&list);
+
     }
     return best;
 }
@@ -649,20 +647,20 @@ FcLangSetHasLang (const FcLangSet *ls, const FcChar8 *lang)
 static FcLangResult
 FcLangSetCompareStrSet (const FcLangSet *ls, FcStrSet *set)
 {
-    FcStrList	    *list = FcStrListCreate (set);
+    FcStrList	    list;
     FcLangResult    r, best = FcLangDifferentLang;
     FcChar8	    *extra;
 
-    if (list)
+    FcStrListInitialize (set, &list);
+
+    while (best > FcLangEqual && (extra = FcStrListNext (&list)))
     {
-	while (best > FcLangEqual && (extra = FcStrListNext (list)))
-	{
-	    r = FcLangSetHasLang (ls, extra);
-	    if (r < best)
-		best = r;
-	}
-	FcStrListDone (list);
+	r = FcLangSetHasLang (ls, extra);
+	if (r < best)
+	    best = r;
     }
+    FcStrListRelease (&list);
+
     return best;
 }
 
@@ -814,27 +812,27 @@ FcNameUnparseLangSet (FcStrBuf *buf, const FcLangSet *ls)
     }
     if (ls->extra)
     {
-	FcStrList   *list = FcStrListCreate (ls->extra);
+	FcStrList   list;
 	FcChar8	    *extra;
 
-	if (!list)
-	    return FcFalse;
-	while ((extra = FcStrListNext (list)))
+	FcStrListInitialize (ls->extra, &list);
+
+	while ((extra = FcStrListNext (&list)))
 	{
 	    if (!first)
 		if (!FcStrBufChar (buf, '|'))
                 {
-                    FcStrListDone (list);
+                    FcStrListRelease (&list);
 		    return FcFalse;
                 }
 	    if (!FcStrBufString (buf, extra))
                 {
-                    FcStrListDone (list);
+                    FcStrListRelease (&list);
                     return FcFalse;
                 }
 	    first = FcFalse;
 	}
-        FcStrListDone (list);
+        FcStrListRelease (&list);
     }
     return FcTrue;
 }
@@ -890,20 +888,19 @@ FcLangSetContainsLang (const FcLangSet *ls, const FcChar8 *lang)
     }
     if (ls->extra)
     {
-	FcStrList	*list = FcStrListCreate (ls->extra);
+	FcStrList	list;
 	FcChar8		*extra;
+
+	FcStrListInitialize (ls->extra, &list);
 	
-	if (list)
+	while ((extra = FcStrListNext (&list)))
 	{
-	    while ((extra = FcStrListNext (list)))
-	    {
-		if (FcLangContains (extra, lang))
-		    break;
-	    }
-	    FcStrListDone (list);
-    	    if (extra)
-		return FcTrue;
+	    if (FcLangContains (extra, lang))
+		break;
 	}
+	FcStrListRelease (&list);
+	if (extra)
+	    return FcTrue;
     }
     return FcFalse;
 }
@@ -948,24 +945,23 @@ FcLangSetContains (const FcLangSet *lsa, const FcLangSet *lsb)
     }
     if (lsb->extra)
     {
-	FcStrList   *list = FcStrListCreate (lsb->extra);
+	FcStrList   list;
 	FcChar8	    *extra;
 
-	if (list)
+	FcStrListInitialize (lsb->extra, &list);
+
+	while ((extra = FcStrListNext (&list)))
 	{
-	    while ((extra = FcStrListNext (list)))
+	    if (!FcLangSetContainsLang (lsa, extra))
 	    {
-		if (!FcLangSetContainsLang (lsa, extra))
-		{
-		    if (FcDebug() & FC_DBG_MATCHV)
-			printf ("\tMissing string %s\n", extra);
-		    break;
-		}
+		if (FcDebug() & FC_DBG_MATCHV)
+		    printf ("\tMissing string %s\n", extra);
+		break;
 	    }
-	    FcStrListDone (list);
-	    if (extra)
-		return FcFalse;
 	}
+	FcStrListRelease (&list);
+	if (extra)
+	    return FcFalse;
     }
     return FcTrue;
 }
@@ -1008,16 +1004,15 @@ FcLangSetGetLangs (const FcLangSet *ls)
 
     if (ls->extra)
     {
-	FcStrList	*list = FcStrListCreate (ls->extra);
+	FcStrList	list;
 	FcChar8		*extra;
 
-	if (list)
-	{
-	    while ((extra = FcStrListNext (list)))
-		FcStrSetAdd (langs, extra);
+	FcStrListInitialize (ls->extra, &list);
 
-	    FcStrListDone (list);
-	}
+	while ((extra = FcStrListNext (&list)))
+	    FcStrSetAdd (langs, extra);
+
+	FcStrListRelease (&list);
     }
 
     return langs;
@@ -1031,15 +1026,16 @@ FcLangSetOperate(const FcLangSet	*a,
 {
     FcLangSet	*langset = FcLangSetCopy (a);
     FcStrSet	*set = FcLangSetGetLangs (b);
-    FcStrList	*sl = FcStrListCreate (set);
+    FcStrList	sl;
     FcChar8	*str;
 
+    FcStrListInitialize (set, &sl);
     FcStrSetDestroy (set);
-    while ((str = FcStrListNext (sl)))
+    while ((str = FcStrListNext (&sl)))
     {
 	func (langset, str);
     }
-    FcStrListDone (sl);
+    FcStrListRelease (&sl);
 
     return langset;
 }
diff --git a/src/fcstr.c b/src/fcstr.c
index 4d7fc8a..9b5c13b 100644
--- a/src/fcstr.c
+++ b/src/fcstr.c
@@ -1344,6 +1344,14 @@ FcStrSetDestroy (FcStrSet *set)
     free (set);
 }
 
+void
+FcStrListInitialize (FcStrSet *set, FcStrList *list)
+{
+    list->set = set;
+    FcStrSetReference (set);
+    list->n = 0;
+}
+
 FcStrList *
 FcStrListCreate (FcStrSet *set)
 {
@@ -1352,9 +1360,7 @@ FcStrListCreate (FcStrSet *set)
     list = malloc (sizeof (FcStrList));
     if (!list)
 	return 0;
-    list->set = set;
-    FcStrSetReference (set);
-    list->n = 0;
+    FcStrListInitialize (set, list);
     return list;
 }
 
@@ -1373,9 +1379,15 @@ FcStrListNext (FcStrList *list)
 }
 
 void
-FcStrListDone (FcStrList *list)
+FcStrListRelease (FcStrList *list)
 {
     FcStrSetDestroy (list->set);
+}
+
+void
+FcStrListDone (FcStrList *list)
+{
+    FcStrListRelease (list);
     free (list);
 }
 
-- 
2.15.1

