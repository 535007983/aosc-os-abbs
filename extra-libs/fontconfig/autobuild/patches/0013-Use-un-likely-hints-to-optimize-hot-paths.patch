From 10c7c1981121367460bb51b7e99d7c2b112a29ee Mon Sep 17 00:00:00 2001
From: Michal Srb <michalsrb@gmail.com>
Date: Thu, 16 Mar 2017 21:20:29 +0200
Subject: [PATCH 13/13] Use (un)likely hints to optimize hot paths.

Using likely and unlikely macros, which are implemented using the __builtin_expect gives visible speed boost to hot paths. Used in FcCompareFamily, FcCompareValueList, FcStrCaseWalkerNext and FcStrCaseWalkerNextSkipDelim.

TODO: Add benchmark data.
---
 src/fcint.h   |  8 ++++++++
 src/fcmatch.c | 12 ++++++------
 src/fcstr.c   |  6 +++---
 3 files changed, 17 insertions(+), 9 deletions(-)

diff --git a/src/fcint.h b/src/fcint.h
index a79d187..f7e91d6 100644
--- a/src/fcint.h
+++ b/src/fcint.h
@@ -108,6 +108,14 @@ extern pfnSHGetFolderPathA pSHGetFolderPathA;
 #define FcPrivate
 #endif
 
+#if defined(__GNUC__) || defined(__llvm__)
+#define likely(x)       __builtin_expect(!!(x), 1)
+#define unlikely(x)     __builtin_expect(!!(x), 0)
+#else
+#define likely(x)       (x)
+#define unlikely(x)     (x)
+#endif
+
 FC_ASSERT_STATIC (sizeof (FcRef) == sizeof (int));
 
 typedef enum _FcValueBinding {
diff --git a/src/fcmatch.c b/src/fcmatch.c
index be26af5..39004a4 100644
--- a/src/fcmatch.c
+++ b/src/fcmatch.c
@@ -90,11 +90,11 @@ FcPreprocessFamily (FcValue *v)
 static double
 FcCompareFamily (FcValue *v1, FcPrepValue *p1, FcValue *v2, FcPrepValue *p2)
 {
-    if (p1->type == FcPrepStrHashIgnoreBlanksAndCase &&
-	p2->type == FcPrepStrHashIgnoreBlanksAndCase)
+    if (likely(p1->type == FcPrepStrHashIgnoreBlanksAndCase &&
+	       p2->type == FcPrepStrHashIgnoreBlanksAndCase))
     {
 	// If hashes are not matching, return fast
-	if (p1->str_hash != p2->str_hash)
+	if (likely(p1->str_hash != p2->str_hash))
 	    return 1.0;
     }
 
@@ -445,20 +445,20 @@ FcCompareValueList (FcObject	     object,
 	for (v1 = v1orig, j = 0; v1; v1 = FcValueListNext(v1), j++)
 	{
 	    v = (match->compare) (&v1->value, &v1->prep_value, &v2->value, &v2->prep_value);
-	    if (v < 0)
+	    if (unlikely(v < 0))
 	    {
 		*result = FcResultTypeMismatch;
 		return FcFalse;
 	    }
 	    v = v * 1000 + j;
-	    if (v < best)
+	    if (unlikely(v < best))
 	    {
 		if (bestValue)
 		    *bestValue = FcValueCanonicalize(&v2->value);
 		best = v;
 		pos = k;
 	    }
-	    if (v1->binding == FcValueBindingStrong)
+	    if (unlikely(v1->binding == FcValueBindingStrong))
 	    {
 		if (v < bestStrong)
 		    bestStrong = v;
diff --git a/src/fcstr.c b/src/fcstr.c
index 94f3e9e..b51153c 100644
--- a/src/fcstr.c
+++ b/src/fcstr.c
@@ -138,7 +138,7 @@ FcStrCaseWalkerNext (FcCaseWalker *w)
 {
     FcChar8	r;
 
-    if (w->read)
+    if (unlikely(w->read))
     {
 	if ((r = *w->read++))
 	    return r;
@@ -146,7 +146,7 @@ FcStrCaseWalkerNext (FcCaseWalker *w)
     }
     r = *w->src++;
 
-    if ((r & 0xc0) == 0xc0)
+    if (unlikely((r & 0xc0) == 0xc0))
 	return FcStrCaseWalkerLong (w, r);
     if ('A' <= r && r <= 'Z')
         r = r - 'A' + 'a';
@@ -161,7 +161,7 @@ FcStrCaseWalkerNextSkipDelim (FcCaseWalker *w, char delim)
     do
     {
 	r = FcStrCaseWalkerNext(w);
-    } while (r == delim);
+    } while (unlikely(r == delim));
 
     return r;
 }
-- 
2.15.1

