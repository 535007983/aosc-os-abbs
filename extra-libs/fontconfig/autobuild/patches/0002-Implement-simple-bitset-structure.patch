From fb2bace6f23c4cbbd05a16e6a015bd5006cb4a68 Mon Sep 17 00:00:00 2001
From: Michal Srb <michalsrb@gmail.com>
Date: Tue, 21 Feb 2017 15:42:02 +0200
Subject: [PATCH 02/13] Implement simple bitset structure.

---
 src/Makefile.am |  1 +
 src/fcbitset.c  | 89 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/fcint.h     | 22 ++++++++++++++
 3 files changed, 112 insertions(+)
 create mode 100644 src/fcbitset.c

diff --git a/src/Makefile.am b/src/Makefile.am
index 3757cf8..7c693ae 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -128,6 +128,7 @@ libfontconfig_la_SOURCES = \
 	fcarch.h \
 	fcatomic.c \
 	fcatomic.h \
+	fcbitset.c \
 	fcblanks.c \
 	fccache.c \
 	fccfg.c \
diff --git a/src/fcbitset.c b/src/fcbitset.c
new file mode 100644
index 0000000..bbc0d68
--- /dev/null
+++ b/src/fcbitset.c
@@ -0,0 +1,89 @@
+/*
+ * fontconfig/src/fcbitset.c
+ *
+ * TODO: Add copyright.
+ *
+ */
+
+#include "fcint.h"
+#include <stdlib.h>
+
+struct _FcBitset {
+    size_t size;
+    size_t ones;
+    FcChar8 data[];
+};
+
+FcBitset *
+FcBitsetCreate (size_t size)
+{
+    size_t size_in_bytes = (size + 7) / 8;
+
+    FcBitset *bitset = (FcBitset *) malloc(sizeof(FcBitset) + size_in_bytes);
+    if (!bitset)
+	return NULL;
+
+    bitset->size = size;
+
+    return bitset;
+}
+
+void
+FcBitsetDestroy (FcBitset *bitset)
+{
+    assert(bitset->size != 0);
+
+    bitset->size = 0;
+    free (bitset);
+}
+
+void
+FcBitsetClear (FcBitset *bitset, FcBool value)
+{
+    assert(bitset->size != 0);
+
+    size_t size_in_bytes = (bitset->size + 7) / 8;
+
+    if (value)
+	bitset->ones = bitset->size;
+    else
+	bitset->ones = 0;
+
+    memset(bitset->data, value ? 255 : 0, size_in_bytes);
+}
+
+void
+FcBitsetSet (FcBitset *bitset, size_t index, FcBool value)
+{
+    assert(index < bitset->size);
+
+    FcChar8 bit = (1 << (index % 8));
+
+    if (value) {
+	if (!(bitset->data[index / 8] & bit))
+	    bitset->ones++;
+
+	bitset->data[index / 8] |= bit;
+    } else {
+	if (bitset->data[index / 8] & bit)
+	    bitset->ones--;
+
+	bitset->data[index / 8] &= ~bit;
+    }
+}
+
+FcBool
+FcBitsetGet (const FcBitset *bitset, size_t index)
+{
+    assert(index < bitset->size);
+
+    return bitset->data[index / 8] & (1 << (index % 8));
+}
+
+size_t
+FcBitsetCountOnes (const FcBitset *bitset)
+{
+    assert(bitset->size != 0);
+
+    return bitset->ones;
+}
diff --git a/src/fcint.h b/src/fcint.h
index ac911ad..a899480 100644
--- a/src/fcint.h
+++ b/src/fcint.h
@@ -568,6 +568,28 @@ struct _FcValuePromotionBuffer {
   } u;
 };
 
+/* fcbitset.c */
+
+typedef struct _FcBitset FcBitset;
+
+FcPrivate FcBitset *
+FcBitsetCreate (size_t size);
+
+FcPrivate void
+FcBitsetDestroy (FcBitset *bitset);
+
+FcPrivate void
+FcBitsetClear (FcBitset *bitset, FcBool value);
+
+FcPrivate void
+FcBitsetSet (FcBitset *bitset, size_t index, FcBool value);
+
+FcPrivate FcBool
+FcBitsetGet (const FcBitset *bitset, size_t index);
+
+FcPrivate size_t
+FcBitsetCountOnes (const FcBitset *bitset);
+
 /* fcblanks.c */
 
 /* fccache.c */
-- 
2.15.1

