diff -Naur calibre-2.71.0/src/calibre/ebooks/oeb/polish/parsing.py calibre-2.71.0.999999999/src/calibre/ebooks/oeb/polish/parsing.py
--- calibre-2.71.0/src/calibre/ebooks/oeb/polish/parsing.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/calibre/ebooks/oeb/polish/parsing.py	2016-11-04 12:28:50.327901105 -0500
@@ -13,8 +13,8 @@
 from lxml.etree import ElementBase, XMLParser, ElementDefaultClassLookup, CommentBase, fromstring, Element as LxmlElement
 
 from html5lib.constants import namespaces, tableInsertModeElements, EOF
-from html5lib.treebuilders._base import TreeBuilder as BaseTreeBuilder
-from html5lib.ihatexml import InfosetFilter, DataLossWarning
+from html5lib.treebuilders.base import TreeBuilder as BaseTreeBuilder
+from html5lib._ihatexml import InfosetFilter, DataLossWarning
 from html5lib.html5parser import HTMLParser
 
 from calibre import xml_replace_entities
@@ -51,7 +51,7 @@
 class Element(ElementBase):
 
     ''' Implements the interface required by the html5lib tree builders (see
-    html5lib.treebuilders._base.Node) on top of the lxml ElementBase class '''
+    html5lib.treebuilders.base.Node) on top of the lxml ElementBase class '''
 
     def __str__(self):
         attrs = ''
diff -Naur calibre-2.71.0/src/html5lib/filters/alphabeticalattributes.py calibre-2.71.0.999999999/src/html5lib/filters/alphabeticalattributes.py
--- calibre-2.71.0/src/html5lib/filters/alphabeticalattributes.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/filters/alphabeticalattributes.py	2016-11-04 12:29:16.323606724 -0500
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, division, unicode_literals
 
-from . import _base
+from . import base
 
 try:
     from collections import OrderedDict
@@ -8,9 +8,9 @@
     from ordereddict import OrderedDict
 
 
-class Filter(_base.Filter):
+class Filter(base.Filter):
     def __iter__(self):
-        for token in _base.Filter.__iter__(self):
+        for token in base.Filter.__iter__(self):
             if token["type"] in ("StartTag", "EmptyTag"):
                 attrs = OrderedDict()
                 for name, value in sorted(token["data"].items(),
diff -Naur calibre-2.71.0/src/html5lib/filters/inject_meta_charset.py calibre-2.71.0.999999999/src/html5lib/filters/inject_meta_charset.py
--- calibre-2.71.0/src/html5lib/filters/inject_meta_charset.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/filters/inject_meta_charset.py	2016-11-04 12:29:16.323606724 -0500
@@ -1,11 +1,11 @@
 from __future__ import absolute_import, division, unicode_literals
 
-from . import _base
+from . import base
 
 
-class Filter(_base.Filter):
+class Filter(base.Filter):
     def __init__(self, source, encoding):
-        _base.Filter.__init__(self, source)
+        base.Filter.__init__(self, source)
         self.encoding = encoding
 
     def __iter__(self):
@@ -13,7 +13,7 @@
         meta_found = (self.encoding is None)
         pending = []
 
-        for token in _base.Filter.__iter__(self):
+        for token in base.Filter.__iter__(self):
             type = token["type"]
             if type == "StartTag":
                 if token["name"].lower() == "head":
diff -Naur calibre-2.71.0/src/html5lib/filters/lint.py calibre-2.71.0.999999999/src/html5lib/filters/lint.py
--- calibre-2.71.0/src/html5lib/filters/lint.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/filters/lint.py	2016-11-04 12:29:16.323606724 -0500
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, division, unicode_literals
 
-from . import _base
+from . import base
 from ..constants import cdataElements, rcdataElements, voidElements
 
 from ..constants import spaceCharacters
@@ -11,11 +11,11 @@
     pass
 
 
-class Filter(_base.Filter):
+class Filter(base.Filter):
     def __iter__(self):
         open_elements = []
         contentModelFlag = "PCDATA"
-        for token in _base.Filter.__iter__(self):
+        for token in base.Filter.__iter__(self):
             type = token["type"]
             if type in ("StartTag", "EmptyTag"):
                 name = token["name"]
diff -Naur calibre-2.71.0/src/html5lib/filters/optionaltags.py calibre-2.71.0.999999999/src/html5lib/filters/optionaltags.py
--- calibre-2.71.0/src/html5lib/filters/optionaltags.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/filters/optionaltags.py	2016-11-04 12:29:16.323606724 -0500
@@ -1,9 +1,9 @@
 from __future__ import absolute_import, division, unicode_literals
 
-from . import _base
+from . import base
 
 
-class Filter(_base.Filter):
+class Filter(base.Filter):
     def slider(self):
         previous1 = previous2 = None
         for token in self.source:
diff -Naur calibre-2.71.0/src/html5lib/filters/sanitizer.py calibre-2.71.0.999999999/src/html5lib/filters/sanitizer.py
--- calibre-2.71.0/src/html5lib/filters/sanitizer.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/filters/sanitizer.py	2016-11-04 12:29:16.323606724 -0500
@@ -1,12 +1,12 @@
 from __future__ import absolute_import, division, unicode_literals
 
-from . import _base
+from . import base
 from ..sanitizer import HTMLSanitizerMixin
 
 
-class Filter(_base.Filter, HTMLSanitizerMixin):
+class Filter(base.Filter, HTMLSanitizerMixin):
     def __iter__(self):
-        for token in _base.Filter.__iter__(self):
+        for token in base.Filter.__iter__(self):
             token = self.sanitize_token(token)
             if token:
                 yield token
diff -Naur calibre-2.71.0/src/html5lib/filters/whitespace.py calibre-2.71.0.999999999/src/html5lib/filters/whitespace.py
--- calibre-2.71.0/src/html5lib/filters/whitespace.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/filters/whitespace.py	2016-11-04 12:29:16.323606724 -0500
@@ -2,20 +2,20 @@
 
 import re
 
-from . import _base
+from . import base
 from ..constants import rcdataElements, spaceCharacters
 spaceCharacters = "".join(spaceCharacters)
 
 SPACES_REGEX = re.compile("[%s]+" % spaceCharacters)
 
 
-class Filter(_base.Filter):
+class Filter(base.Filter):
 
     spacePreserveElements = frozenset(["pre", "textarea"] + list(rcdataElements))
 
     def __iter__(self):
         preserve = 0
-        for token in _base.Filter.__iter__(self):
+        for token in base.Filter.__iter__(self):
             type = token["type"]
             if type == "StartTag" \
                     and (preserve or token["name"] in self.spacePreserveElements):
diff -Naur calibre-2.71.0/src/html5lib/html5parser.py calibre-2.71.0.999999999/src/html5lib/html5parser.py
--- calibre-2.71.0/src/html5lib/html5parser.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/html5parser.py	2016-11-04 12:29:16.320273510 -0500
@@ -7,7 +7,7 @@
 from . import tokenizer
 
 from . import treebuilders
-from .treebuilders._base import Marker
+from .treebuilders.base import Marker
 
 from . import utils
 from .constants import (
diff -Naur calibre-2.71.0/src/html5lib/treebuilders/dom.py calibre-2.71.0.999999999/src/html5lib/treebuilders/dom.py
--- calibre-2.71.0/src/html5lib/treebuilders/dom.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/treebuilders/dom.py	2016-11-04 12:29:16.323606724 -0500
@@ -4,7 +4,7 @@
 from xml.dom import minidom, Node
 import weakref
 
-from . import _base
+from . import base
 from .. import constants
 from ..constants import namespaces
 from ..utils import moduleFactoryFactory
@@ -42,9 +42,9 @@
             else:
                 return self.element.hasAttribute(name)
 
-    class NodeBuilder(_base.Node):
+    class NodeBuilder(base.Node):
         def __init__(self, element):
-            _base.Node.__init__(self, element.nodeName)
+            base.Node.__init__(self, element.nodeName)
             self.element = element
 
         namespace = property(lambda self: hasattr(self.element, "namespaceURI")
@@ -109,7 +109,7 @@
 
         nameTuple = property(getNameTuple)
 
-    class TreeBuilder(_base.TreeBuilder):
+    class TreeBuilder(base.TreeBuilder):
         def documentClass(self):
             self.dom = Dom.getDOMImplementation().createDocument(None, None, None)
             return weakref.proxy(self)
@@ -149,12 +149,12 @@
             return self.dom
 
         def getFragment(self):
-            return _base.TreeBuilder.getFragment(self).element
+            return base.TreeBuilder.getFragment(self).element
 
         def insertText(self, data, parent=None):
             data = data
             if parent != self:
-                _base.TreeBuilder.insertText(self, data, parent)
+                base.TreeBuilder.insertText(self, data, parent)
             else:
                 # HACK: allow text nodes as children of the document node
                 if hasattr(self.dom, '_child_node_types'):
diff -Naur calibre-2.71.0/src/html5lib/treebuilders/etree_lxml.py calibre-2.71.0.999999999/src/html5lib/treebuilders/etree_lxml.py
--- calibre-2.71.0/src/html5lib/treebuilders/etree_lxml.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/treebuilders/etree_lxml.py	2016-11-04 12:29:16.326939937 -0500
@@ -15,11 +15,11 @@
 import re
 import sys
 
-from . import _base
+from . import base
 from ..constants import DataLossWarning
 from .. import constants
 from . import etree as etree_builders
-from .. import ihatexml
+from .. import _ihatexml
 
 import lxml.etree as etree
 
@@ -54,7 +54,7 @@
 def testSerializer(element):
     rv = []
     finalText = None
-    infosetFilter = ihatexml.InfosetFilter()
+    infosetFilter = _ihatexml.InfosetFilter()
 
     def serializeElement(element, indent=0):
         if not hasattr(element, "tag"):
@@ -179,7 +179,7 @@
     return "".join(rv)
 
 
-class TreeBuilder(_base.TreeBuilder):
+class TreeBuilder(base.TreeBuilder):
     documentClass = Document
     doctypeClass = DocumentType
     elementClass = None
@@ -189,7 +189,7 @@
 
     def __init__(self, namespaceHTMLElements, fullTree=False):
         builder = etree_builders.getETreeModule(etree, fullTree=fullTree)
-        infosetFilter = self.infosetFilter = ihatexml.InfosetFilter()
+        infosetFilter = self.infosetFilter = _ihatexml.InfosetFilter()
         self.namespaceHTMLElements = namespaceHTMLElements
 
         class Attributes(dict):
@@ -259,10 +259,10 @@
         self.elementClass = Element
         self.commentClass = builder.Comment
         # self.fragmentClass = builder.DocumentFragment
-        _base.TreeBuilder.__init__(self, namespaceHTMLElements)
+        base.TreeBuilder.__init__(self, namespaceHTMLElements)
 
     def reset(self):
-        _base.TreeBuilder.reset(self)
+        base.TreeBuilder.reset(self)
         self.insertComment = self.insertCommentInitial
         self.initial_comments = []
         self.doctype = None
diff -Naur calibre-2.71.0/src/html5lib/treebuilders/etree.py calibre-2.71.0.999999999/src/html5lib/treebuilders/etree.py
--- calibre-2.71.0/src/html5lib/treebuilders/etree.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/treebuilders/etree.py	2016-11-04 12:29:16.326939937 -0500
@@ -6,8 +6,8 @@
 
 import re
 
-from . import _base
-from .. import ihatexml
+from . import base
+from .. import _ihatexml
 from .. import constants
 from ..constants import namespaces
 from ..utils import moduleFactoryFactory
@@ -19,7 +19,7 @@
     ElementTree = ElementTreeImplementation
     ElementTreeCommentType = ElementTree.Comment("asd").tag
 
-    class Element(_base.Node):
+    class Element(base.Node):
         def __init__(self, name, namespace=None):
             self._name = name
             self._namespace = namespace
@@ -142,7 +142,7 @@
                 if self._element.text is not None:
                     newParent._element.text += self._element.text
             self._element.text = ""
-            _base.Node.reparentChildren(self, newParent)
+            base.Node.reparentChildren(self, newParent)
 
     class Comment(Element):
         def __init__(self, data):
@@ -259,7 +259,7 @@
     def tostring(element):
         """Serialize an element and its child nodes to a string"""
         rv = []
-        filter = ihatexml.InfosetFilter()
+        filter = _ihatexml.InfosetFilter()
 
         def serializeElement(element):
             if isinstance(element, ElementTree.ElementTree):
@@ -310,7 +310,7 @@
 
         return "".join(rv)
 
-    class TreeBuilder(_base.TreeBuilder):
+    class TreeBuilder(base.TreeBuilder):
         documentClass = Document
         doctypeClass = DocumentType
         elementClass = Element
@@ -332,7 +332,7 @@
                     return self.document._element.find("html")
 
         def getFragment(self):
-            return _base.TreeBuilder.getFragment(self)._element
+            return base.TreeBuilder.getFragment(self)._element
 
     return locals()
 
diff -Naur calibre-2.71.0/src/html5lib/treebuilders/__init__.py calibre-2.71.0.999999999/src/html5lib/treebuilders/__init__.py
--- calibre-2.71.0/src/html5lib/treebuilders/__init__.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/treebuilders/__init__.py	2016-11-04 12:29:16.326939937 -0500
@@ -6,13 +6,13 @@
 
 1) A set of classes for various types of elements: Document, Doctype,
 Comment, Element. These must implement the interface of
-_base.treebuilders.Node (although comment nodes have a different
+base.treebuilders.Node (although comment nodes have a different
 signature for their constructor, see treebuilders.etree.Comment)
 Textual content may also be implemented as another node type, or not, as
 your tree implementation requires.
 
 2) A treebuilder object (called TreeBuilder by convention) that
-inherits from treebuilders._base.TreeBuilder. This has 4 required attributes:
+inherits from treebuilders.base.TreeBuilder. This has 4 required attributes:
 documentClass - the class to use for the bottommost node of a document
 elementClass - the class to use for HTML Elements
 commentClass - the class to use for comments
diff -Naur calibre-2.71.0/src/html5lib/treewalkers/dom.py calibre-2.71.0.999999999/src/html5lib/treewalkers/dom.py
--- calibre-2.71.0/src/html5lib/treewalkers/dom.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/treewalkers/dom.py	2016-11-04 12:29:16.310273872 -0500
@@ -2,16 +2,16 @@
 
 from xml.dom import Node
 
-from . import _base
+from . import base
 
 
-class TreeWalker(_base.NonRecursiveTreeWalker):
+class TreeWalker(base.NonRecursiveTreeWalker):
     def getNodeDetails(self, node):
         if node.nodeType == Node.DOCUMENT_TYPE_NODE:
-            return _base.DOCTYPE, node.name, node.publicId, node.systemId
+            return base.DOCTYPE, node.name, node.publicId, node.systemId
 
         elif node.nodeType in (Node.TEXT_NODE, Node.CDATA_SECTION_NODE):
-            return _base.TEXT, node.nodeValue
+            return base.TEXT, node.nodeValue
 
         elif node.nodeType == Node.ELEMENT_NODE:
             attrs = {}
@@ -21,17 +21,17 @@
                     attrs[(attr.namespaceURI, attr.localName)] = attr.value
                 else:
                     attrs[(None, attr.name)] = attr.value
-            return (_base.ELEMENT, node.namespaceURI, node.nodeName,
+            return (base.ELEMENT, node.namespaceURI, node.nodeName,
                     attrs, node.hasChildNodes())
 
         elif node.nodeType == Node.COMMENT_NODE:
-            return _base.COMMENT, node.nodeValue
+            return base.COMMENT, node.nodeValue
 
         elif node.nodeType in (Node.DOCUMENT_NODE, Node.DOCUMENT_FRAGMENT_NODE):
-            return (_base.DOCUMENT,)
+            return (base.DOCUMENT,)
 
         else:
-            return _base.UNKNOWN, node.nodeType
+            return base.UNKNOWN, node.nodeType
 
     def getFirstChild(self, node):
         return node.firstChild
diff -Naur calibre-2.71.0/src/html5lib/treewalkers/etree.py calibre-2.71.0.999999999/src/html5lib/treewalkers/etree.py
--- calibre-2.71.0/src/html5lib/treewalkers/etree.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/treewalkers/etree.py	2016-11-04 12:29:16.310273872 -0500
@@ -16,7 +16,7 @@
 except NameError:
     string_types = str,
 
-from . import _base
+from . import base
 from ..utils import moduleFactoryFactory
 
 tag_regexp = re.compile("{([^}]*)}(.*)")
@@ -26,7 +26,7 @@
     ElementTree = ElementTreeImplementation
     ElementTreeCommentType = ElementTree.Comment("asd").tag
 
-    class TreeWalker(_base.NonRecursiveTreeWalker):
+    class TreeWalker(base.NonRecursiveTreeWalker):
         """Given the particular ElementTree representation, this implementation,
         to avoid using recursion, returns "nodes" as tuples with the following
         content:
@@ -44,7 +44,7 @@
             if isinstance(node, tuple):  # It might be the root Element
                 elt, key, parents, flag = node
                 if flag in ("text", "tail"):
-                    return _base.TEXT, getattr(elt, flag)
+                    return base.TEXT, getattr(elt, flag)
                 else:
                     node = elt
 
@@ -52,14 +52,14 @@
                 node = node.getroot()
 
             if node.tag in ("DOCUMENT_ROOT", "DOCUMENT_FRAGMENT"):
-                return (_base.DOCUMENT,)
+                return (base.DOCUMENT,)
 
             elif node.tag == "<!DOCTYPE>":
-                return (_base.DOCTYPE, node.text,
+                return (base.DOCTYPE, node.text,
                         node.get("publicId"), node.get("systemId"))
 
             elif node.tag == ElementTreeCommentType:
-                return _base.COMMENT, node.text
+                return base.COMMENT, node.text
 
             else:
                 assert isinstance(node.tag, string_types), type(node.tag)
@@ -77,7 +77,7 @@
                         attrs[(match.group(1), match.group(2))] = value
                     else:
                         attrs[(None, name)] = value
-                return (_base.ELEMENT, namespace, tag,
+                return (base.ELEMENT, namespace, tag,
                         attrs, len(node) or node.text)
 
         def getFirstChild(self, node):
diff -Naur calibre-2.71.0/src/html5lib/treewalkers/genshistream.py calibre-2.71.0.999999999/src/html5lib/treewalkers/genshistream.py
--- calibre-2.71.0/src/html5lib/treewalkers/genshistream.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/treewalkers/genshistream.py	2016-11-04 12:29:16.310273872 -0500
@@ -4,12 +4,12 @@
 from genshi.core import START, END, XML_NAMESPACE, DOCTYPE, TEXT
 from genshi.core import START_NS, END_NS, START_CDATA, END_CDATA, PI, COMMENT
 
-from . import _base
+from . import base
 
 from ..constants import voidElements, namespaces
 
 
-class TreeWalker(_base.TreeWalker):
+class TreeWalker(base.TreeWalker):
     def __iter__(self):
         # Buffer the events so we can pass in the following one
         previous = None
diff -Naur calibre-2.71.0/src/html5lib/treewalkers/lxmletree.py calibre-2.71.0.999999999/src/html5lib/treewalkers/lxmletree.py
--- calibre-2.71.0/src/html5lib/treewalkers/lxmletree.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/treewalkers/lxmletree.py	2016-11-04 12:29:16.310273872 -0500
@@ -7,9 +7,9 @@
 from lxml import etree
 from ..treebuilders.etree import tag_regexp
 
-from . import _base
+from . import base
 
-from .. import ihatexml
+from .. import _ihatexml
 
 
 def ensure_str(s):
@@ -118,35 +118,35 @@
         return len(self.obj)
 
 
-class TreeWalker(_base.NonRecursiveTreeWalker):
+class TreeWalker(base.NonRecursiveTreeWalker):
     def __init__(self, tree):
         if hasattr(tree, "getroot"):
             tree = Root(tree)
         elif isinstance(tree, list):
             tree = FragmentRoot(tree)
-        _base.NonRecursiveTreeWalker.__init__(self, tree)
-        self.filter = ihatexml.InfosetFilter()
+        base.NonRecursiveTreeWalker.__init__(self, tree)
+        self.filter = _ihatexml.InfosetFilter()
 
     def getNodeDetails(self, node):
         if isinstance(node, tuple):  # Text node
             node, key = node
             assert key in ("text", "tail"), "Text nodes are text or tail, found %s" % key
-            return _base.TEXT, ensure_str(getattr(node, key))
+            return base.TEXT, ensure_str(getattr(node, key))
 
         elif isinstance(node, Root):
-            return (_base.DOCUMENT,)
+            return (base.DOCUMENT,)
 
         elif isinstance(node, Doctype):
-            return _base.DOCTYPE, node.name, node.public_id, node.system_id
+            return base.DOCTYPE, node.name, node.public_id, node.system_id
 
         elif isinstance(node, FragmentWrapper) and not hasattr(node, "tag"):
-            return _base.TEXT, node.obj
+            return base.TEXT, node.obj
 
         elif node.tag == etree.Comment:
-            return _base.COMMENT, ensure_str(node.text)
+            return base.COMMENT, ensure_str(node.text)
 
         elif node.tag == etree.Entity:
-            return _base.ENTITY, ensure_str(node.text)[1:-1]  # strip &;
+            return base.ENTITY, ensure_str(node.text)[1:-1]  # strip &;
 
         else:
             # This is assumed to be an ordinary element
@@ -165,7 +165,7 @@
                     attrs[(match.group(1), match.group(2))] = value
                 else:
                     attrs[(None, name)] = value
-            return (_base.ELEMENT, namespace, self.filter.fromXmlName(tag),
+            return (base.ELEMENT, namespace, self.filter.fromXmlName(tag),
                     attrs, len(node) > 0 or node.text)
 
     def getFirstChild(self, node):
diff -Naur calibre-2.71.0/src/html5lib/treewalkers/pulldom.py calibre-2.71.0.999999999/src/html5lib/treewalkers/pulldom.py
--- calibre-2.71.0/src/html5lib/treewalkers/pulldom.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/treewalkers/pulldom.py	2016-11-04 12:29:16.310273872 -0500
@@ -3,12 +3,12 @@
 from xml.dom.pulldom import START_ELEMENT, END_ELEMENT, \
     COMMENT, IGNORABLE_WHITESPACE, CHARACTERS
 
-from . import _base
+from . import base
 
 from ..constants import voidElements
 
 
-class TreeWalker(_base.TreeWalker):
+class TreeWalker(base.TreeWalker):
     def __iter__(self):
         ignore_until = None
         previous = None
diff -Naur calibre-2.71.0/src/html5lib/trie/datrie.py calibre-2.71.0.999999999/src/html5lib/trie/datrie.py
--- calibre-2.71.0/src/html5lib/trie/datrie.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/trie/datrie.py	2016-11-04 12:29:16.303607446 -0500
@@ -6,7 +6,7 @@
 except NameError:
     text_type = str
 
-from ._base import Trie as ABCTrie
+from .base import Trie as ABCTrie
 
 
 class Trie(ABCTrie):
diff -Naur calibre-2.71.0/src/html5lib/trie/py.py calibre-2.71.0.999999999/src/html5lib/trie/py.py
--- calibre-2.71.0/src/html5lib/trie/py.py	2016-10-30 22:57:22.000000000 -0500
+++ calibre-2.71.0.999999999/src/html5lib/trie/py.py	2016-11-04 12:29:16.303607446 -0500
@@ -6,7 +6,7 @@
 
 from bisect import bisect_left
 
-from ._base import Trie as ABCTrie
+from .base import Trie as ABCTrie
 
 
 class Trie(ABCTrie):
