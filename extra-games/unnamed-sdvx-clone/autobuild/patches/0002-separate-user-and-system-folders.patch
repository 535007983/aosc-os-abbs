From c17723969c3d05d03c9005d0abb26a4214c039e4 Mon Sep 17 00:00:00 2001
From: liushuyu <liushuyu011@gmail.com>
Date: Thu, 9 Jul 2020 22:18:34 -0600
Subject: [PATCH] separate user and system folders

---
 .gitignore                     |  1 +
 CMakeLists.txt                 |  1 +
 Main/src/Application.cpp       |  1 +
 Shared/CMakeLists.txt          |  6 +++++-
 Shared/include/Shared/Path.hpp |  2 ++
 Shared/src/Path.cpp            | 11 +++++++++++
 Shared/src/Unix/Path.cpp       | 25 ++++++++++++++++++++++++-
 7 files changed, 45 insertions(+), 2 deletions(-)

diff --git a/.gitignore b/.gitignore
index 17d95cc..100a017 100755
--- a/.gitignore
+++ b/.gitignore
@@ -6,6 +6,7 @@
 *.lib
 *.exe
 *.a
+/build
 
 # Game files
 bin/songs/*
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9708ae4..0331765 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -59,6 +59,7 @@ find_package(Iconv REQUIRED)
 add_definitions(-DUNICODE -D_UNICODE)
 
 OPTION(EMBEDDED "Enable embedded build" OFF)
+OPTION(USE_SYSTEM_PATH "Use system path to search for resources" ON)
 
 if(EMBEDDED)
 	message("Enabling embedded build")
diff --git a/Main/src/Application.cpp b/Main/src/Application.cpp
index 1411b80..965e3d6 100644
--- a/Main/src/Application.cpp
+++ b/Main/src/Application.cpp
@@ -839,6 +839,7 @@ bool Application::m_Init()
 	Path::CreateDir(Path::Absolute("screenshots"));
 	Path::CreateDir(Path::Absolute("songs"));
 	Path::CreateDir(Path::Absolute("replays"));
+	Path::CreateDir(Path::Absolute("preview"));
 
 	return true;
 }
diff --git a/Shared/CMakeLists.txt b/Shared/CMakeLists.txt
index 1760d05..5165256 100644
--- a/Shared/CMakeLists.txt
+++ b/Shared/CMakeLists.txt
@@ -36,7 +36,7 @@ source_group("" FILES ${PCH_FILES})
 enable_precompiled_headers("${SHARED_SRC}" ${PCH_SRC})
 
 add_library(Shared ${SHARED_SRC} ${PCH_FILES})
-target_compile_features(Shared PUBLIC cxx_std_14)
+target_compile_features(Shared PUBLIC cxx_std_17)
 target_include_directories(Shared PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
 target_include_directories(Shared PRIVATE
     ${SRCROOT}
@@ -51,3 +51,7 @@ target_include_directories(Shared SYSTEM PRIVATE ${Iconv_INCLUDE_DIRS})
 
 target_link_libraries(Shared ${LibArchive_LIBRARIES})
 target_include_directories(Shared SYSTEM PRIVATE ${LibArchive_INCLUDE_DIRS})
+
+if(USE_SYSTEM_PATH)
+    target_compile_definitions(Shared PRIVATE DATA_PREFIX="${CMAKE_INSTALL_PREFIX}/share/usc/")
+endif()
diff --git a/Shared/include/Shared/Path.hpp b/Shared/include/Shared/Path.hpp
index 76cef86..f80dda3 100644
--- a/Shared/include/Shared/Path.hpp
+++ b/Shared/include/Shared/Path.hpp
@@ -90,4 +90,6 @@ public:
 	// used to create absolute paths to game directories
 	// If not set, it will default to the game binary directory
 	static String gameDir;
+private:
+	static String GetUserDataDirectory();
 };
diff --git a/Shared/src/Path.cpp b/Shared/src/Path.cpp
index 961e655..4e5e3a1 100644
--- a/Shared/src/Path.cpp
+++ b/Shared/src/Path.cpp
@@ -5,14 +5,25 @@
 /*
 	Common
 */
+#ifdef DATA_PREFIX
+String Path::gameDir = Path::GetUserDataDirectory() + sep + "usc";
+#else
 String Path::gameDir = "";
+#endif
 
 String Path::Absolute(const String& path)
 {
 	if(IsAbsolute(path))
 		return path;
 
+#ifdef DATA_PREFIX
+	String baseDir = String(DATA_PREFIX);
+	if (path.find("skins/Default") == String::npos && path.find("fonts") == String::npos) {
+		baseDir = !gameDir.empty() ? gameDir : RemoveLast(GetExecutablePath());
+	}
+#else
 	String baseDir = !gameDir.empty() ? gameDir : RemoveLast(GetExecutablePath());
+#endif
 	return baseDir + sep + path;
 }
 String Path::RemoveLast(const String& path, String* lastOut /*= nullptr*/)
diff --git a/Shared/src/Unix/Path.cpp b/Shared/src/Unix/Path.cpp
index 1011cb1..9c3de24 100644
--- a/Shared/src/Unix/Path.cpp
+++ b/Shared/src/Unix/Path.cpp
@@ -17,14 +17,37 @@
 #include <dirent.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <pwd.h>
+#include <filesystem>
 // Convenience
 #define MAX_PATH PATH_MAX
 
 char Path::sep = '/';
 
+String Path::GetUserDataDirectory()
+{
+	size_t bufsize;
+	char *buf;
+	struct passwd *result;
+	struct passwd pwd;
+	int ret;
+	const char *datadir = getenv("XDG_DATA_HOME");
+	if (datadir) return String(datadir);
+	const char *homedir = getenv("HOME");
+	if (homedir) return String(homedir) + "/.local/share";
+	bufsize = sysconf(_SC_GETPW_R_SIZE_MAX);
+	if (bufsize == -1)
+		bufsize = 16384;
+	buf = (char*)malloc(bufsize);
+	if (!buf) return "";
+	ret = getpwuid_r(geteuid(), &pwd, buf, bufsize, &result);
+	if (!result) return "";
+
+	return String(result->pw_dir) + "/.local/share";
+}
 bool Path::CreateDir(const String& path)
 {
-	return mkdir(*path, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH) == 0;
+	return std::filesystem::create_directories(path.c_str());
 }
 bool Path::Delete(const String& path)
 {
-- 
2.27.0

