--- a/game/gamesys/TypeInfo.cpp	2017-03-11 06:24:12.000000000 +0800
+++ b/game/gamesys/TypeInfo.cpp	2017-07-25 13:27:00.000000000 +0800
@@ -11,24 +11,43 @@
  
  Project: The Dark Mod (http://www.thedarkmod.com/)
  
- $Revision: 6309 $ (Revision of last commit) 
- $Date: 2014-11-30 20:35:07 +0000 (Sun, 30 Nov 2014) $ (Date of last commit)
- $Author: grayman $ (Author of last commit)
- 
 ******************************************************************************/
 
+// As stated below, the trick of defining "private" and "protected" is pure evil.
+// We pay for it in class definitions that implicitly declare private members
+// without using the (default) private visibility declaration.
+// This becomes a real problem in code like the one found in GCC 6.2, along the lines:
+//     
+//     class Class {
+//       struct PrivateStruct; // forward declaration
+//       // ...
+//         private:
+//       struct PrivateStruct {}; // actual definition
+//     };
+//
+// In this case, PrivateStruct is implicitly declared private, and then defined as
+// "private", that after our trick becomes "public". Joy ensues.
+// We import all the things like that before the trick takes places.
+// We lose access to some variable inspection, but we gain in compilability
+// (and a bit in sanity).
+#if defined(__GNUC__) && (__GNUC__ >= 5)
+// these were observed in GNU GCC 6.2.0 (not in 5.4.0):
+#include <sstream>
+#endif // if GCC 6+
+
 // This is real evil but allows the code to inspect arbitrary class variables.
 #define private		public
 #define protected	public
 
-#include "precompiled_game.h"
+#include	"precompiled_game.h"
 #pragma hdrstop
 
-static bool versioned = RegisterVersionedFile("$Id: TypeInfo.cpp 6309 2014-11-30 20:35:07Z grayman $");
+
 
 #include "../Game_local.h"
 
-#ifdef ID_DEBUG_MEMORY
+#ifdef ID_USE_TYPEINFO
+#include "TypeInfo_GenHelper.h"			// stgatilov: define all classes
 #include "GameTypeInfo.h"				// Make sure this is up to date!
 #else
 #include "NoGameTypeInfo.h"
@@ -552,7 +571,7 @@
 	// if this is a pointer
 	isPointer = 0;
 	for ( i = typeString.Length(); i > 0 && typeString[i - 1] == '*'; i -= 2 ) {
-		if ( varPtr == (void *)0xcdcdcdcd || ( varPtr != NULL && *((unsigned long *)varPtr) == 0xcdcdcdcd ) ) {
+		if ( varPtr == (void *)0xcdcdcdcd || ( varPtr != NULL && *((unsigned int *)varPtr) == 0xcdcdcdcd ) ) {
 			common->Warning( "%s%s::%s%s references uninitialized memory", prefix, scope, varName, "" );
 			return typeSize;
 		}
