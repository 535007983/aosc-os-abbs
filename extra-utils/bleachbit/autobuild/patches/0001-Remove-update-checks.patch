diff -Naur bleachbit-2.2/bleachbit/CLI.py bleachbit-2.2.noupdate/bleachbit/CLI.py
--- bleachbit-2.2/bleachbit/CLI.py	2019-03-20 02:44:52.000000000 +0000
+++ bleachbit-2.2.noupdate/bleachbit/CLI.py	2019-10-09 04:40:09.876001384 +0000
@@ -191,14 +191,6 @@
 This is free software: you are free to change and redistribute it.
 There is NO WARRANTY, to the extent permitted by law.""" % APP_VERSION)
         sys.exit(0)
-    if 'nt' == os.name and options.update_winapp2:
-        from bleachbit import Update
-        logger.info(_("Checking online for updates to winapp2.ini"))
-        Update.check_updates(False, True,
-                             lambda x: sys.stdout.write("%s\n" % x),
-                             lambda: None)
-        # updates can be combined with --list-cleaners, --preview, --clean
-        did_something = True
     if options.list_cleaners:
         list_cleaners()
         sys.exit(0)
diff -Naur bleachbit-2.2/bleachbit/GUI.py bleachbit-2.2.noupdate/bleachbit/GUI.py
--- bleachbit-2.2/bleachbit/GUI.py	2019-03-20 02:44:52.000000000 +0000
+++ bleachbit-2.2.noupdate/bleachbit/GUI.py	2019-10-09 04:39:46.851720232 +0000
@@ -894,21 +894,6 @@
         self.progressbar.hide()
         return
 
-    @threaded
-    def check_online_updates(self):
-        """Check for software updates in background"""
-        from bleachbit import Update
-        try:
-            updates = Update.check_updates(options.get('check_beta'),
-                                           options.get('update_winapp2'),
-                                           self.append_text,
-                                           lambda: gobject.idle_add(self.cb_refresh_operations))
-            if updates:
-                gobject.idle_add(
-                    lambda: Update.update_dialog(self.window, updates))
-        except Exception:
-            logger.exception(_("Error when checking for updates: "))
-
     def __init__(self, uac=True, shred_paths=None, exit=False):
         if uac and 'nt' == os.name and Windows.elevate_privileges():
             # privileges escalated in other process
diff -Naur bleachbit-2.2/bleachbit/GuiPreferences.py bleachbit-2.2.noupdate/bleachbit/GuiPreferences.py
--- bleachbit-2.2/bleachbit/GuiPreferences.py	2019-03-20 02:44:52.000000000 +0000
+++ bleachbit-2.2.noupdate/bleachbit/GuiPreferences.py	2019-10-09 04:39:33.731180158 +0000
@@ -26,7 +26,6 @@
 
 from __future__ import absolute_import, print_function
 
-from bleachbit import _, _p, online_update_notification_enabled
 from bleachbit.Options import options
 from bleachbit import GuiBasic
 
@@ -77,11 +76,6 @@
     def __toggle_callback(self, cell, path):
         """Callback function to toggle option"""
         options.toggle(path)
-        if online_update_notification_enabled:
-            self.cb_beta.set_sensitive(options.get('check_online_updates'))
-            if 'nt' == os.name:
-                self.cb_winapp2.set_sensitive(
-                    options.get('check_online_updates'))
         if 'auto_hide' == path:
             self.cb_refresh_operations()
         if 'auto_start' == path:
@@ -112,38 +106,6 @@
 
         vbox = gtk.VBox()
 
-        if online_update_notification_enabled:
-            cb_updates = gtk.CheckButton(
-                _("Check periodically for software updates via the Internet"))
-            cb_updates.set_active(options.get('check_online_updates'))
-            cb_updates.connect(
-                'toggled', self.__toggle_callback, 'check_online_updates')
-            cb_updates.set_tooltip_text(
-                _("If an update is found, you will be given the option to view information about it.  Then, you may manually download and install the update."))
-            vbox.pack_start(cb_updates, False)
-
-            updates_box = gtk.VBox()
-            updates_box.set_border_width(10)
-
-            self.cb_beta = gtk.CheckButton(_("Check for new beta releases"))
-            self.cb_beta.set_active(options.get('check_beta'))
-            self.cb_beta.set_sensitive(options.get('check_online_updates'))
-            self.cb_beta.connect(
-                'toggled', self.__toggle_callback, 'check_beta')
-            updates_box.pack_start(self.cb_beta, False)
-
-            if 'nt' == os.name:
-                self.cb_winapp2 = gtk.CheckButton(
-                    _("Download and update cleaners from community (winapp2.ini)"))
-                self.cb_winapp2.set_active(options.get('update_winapp2'))
-                self.cb_winapp2.set_sensitive(
-                    options.get('check_online_updates'))
-                self.cb_winapp2.connect(
-                    'toggled', self.__toggle_callback, 'update_winapp2')
-                updates_box.pack_start(self.cb_winapp2, False)
-
-            vbox.pack_start(updates_box, False)
-
         # TRANSLATORS: This means to hide cleaners which would do
         # nothing.  For example, if Firefox were never used on
         # this system, this option would hide Firefox to simplify
diff -Naur bleachbit-2.2/bleachbit/Update.py bleachbit-2.2.noupdate/bleachbit/Update.py
--- bleachbit-2.2/bleachbit/Update.py	2019-03-20 02:44:52.000000000 +0000
+++ bleachbit-2.2.noupdate/bleachbit/Update.py	1970-01-01 00:00:00.000000000 +0000
@@ -1,198 +0,0 @@
-# vim: ts=4:sw=4:expandtab
-
-# BleachBit
-# Copyright (C) 2008-2019 Andrew Ziem
-# https://www.bleachbit.org
-#
-# This program is free software: you can redistribute it and/or modify
-# it under the terms of the GNU General Public License as published by
-# the Free Software Foundation, either version 3 of the License, or
-# (at your option) any later version.
-#
-# This program is distributed in the hope that it will be useful,
-# but WITHOUT ANY WARRANTY; without even the implied warranty of
-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-# GNU General Public License for more details.
-#
-# You should have received a copy of the GNU General Public License
-# along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-
-"""
-Check for updates via the Internet
-"""
-
-from __future__ import absolute_import, print_function
-
-import bleachbit
-from bleachbit import _
-
-import hashlib
-import logging
-import os
-import os.path
-import platform
-import socket
-import sys
-if sys.version >= (3, 0):
-    from urllib.request import build_opener
-    from urllib.error import URLError
-else:
-    from urllib2 import build_opener, URLError
-
-import xml.dom.minidom
-
-logger = logging.getLogger(__name__)
-
-
-def update_winapp2(url, hash_expected, append_text, cb_success):
-    """Download latest winapp2.ini file.  Hash is sha512 or None to disable checks"""
-    # first, determine whether an update is necessary
-    from bleachbit import personal_cleaners_dir
-    fn = os.path.join(personal_cleaners_dir, 'winapp2.ini')
-    delete_current = False
-    if os.path.exists(fn):
-        f = open(fn, 'r')
-        hash_current = hashlib.sha512(f.read()).hexdigest()
-        if not hash_expected or hash_current == hash_expected:
-            # update is same as current
-            return
-        f.close()
-        delete_current = True
-    # download update
-    opener = build_opener()
-    opener.addheaders = [('User-Agent', user_agent())]
-    doc = opener.open(fullurl=url, timeout=20).read()
-    # verify hash
-    hash_actual = hashlib.sha512(doc).hexdigest()
-    if hash_expected and not hash_actual == hash_expected:
-        raise RuntimeError("hash for %s actually %s instead of %s" %
-                           (url, hash_actual, hash_expected))
-    # delete current
-    if delete_current:
-        from bleachbit.FileUtilities import delete
-        delete(fn, True)
-    # write file
-    if not os.path.exists(personal_cleaners_dir):
-        os.mkdir(personal_cleaners_dir)
-    f = open(fn, 'w')
-    f.write(doc)
-    append_text(_('New winapp2.ini was downloaded.'))
-    cb_success()
-
-
-def user_agent():
-    """Return the user agent string"""
-    __platform = platform.system()  # Linux or Windows
-    __os = platform.uname()[2]  # e.g., 2.6.28-12-generic or XP
-    if sys.platform == "win32":
-        # misleading: Python 2.5.4 shows uname()[2] as Vista on Windows 7
-        __os = platform.uname()[3][
-            0:3]  # 5.1 = Windows XP, 6.0 = Vista, 6.1 = 7
-    elif sys.platform.startswith('linux'):
-        dist = platform.dist()
-        # example: ('fedora', '11', 'Leonidas')
-        # example: ('', '', '') for Arch Linux
-        if 0 < len(dist[0]):
-            __os = dist[0] + '/' + dist[1] + '-' + dist[2]
-    elif sys.platform[:6] == 'netbsd':
-        __sys = platform.system()
-        mach = platform.machine()
-        rel = platform.release()
-        __os = __sys + '/' + mach + ' ' + rel
-    __locale = ""
-    try:
-        import locale
-        __locale = locale.getdefaultlocale()[0]  # e.g., en_US
-    except:
-        logger.exception('Exception when getting default locale')
-
-    try:
-        import gtk
-        gtkver = '; GTK %s' % '.'.join([str(x) for x in gtk.gtk_version])
-    except:
-        gtkver = ""
-
-    agent = "BleachBit/%s (%s; %s; %s%s)" % (bleachbit.APP_VERSION,
-                                             __platform, __os, __locale, gtkver)
-    return agent
-
-
-def update_dialog(parent, updates):
-    """Updates contains the version numbers and URLs"""
-    import gtk
-    from bleachbit.GuiBasic import open_url
-    dlg = gtk.Dialog(title=_("Update BleachBit"),
-                     parent=parent,
-                     flags=gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT)
-    dlg.set_default_size(250, 125)
-
-    label = gtk.Label(_("A new version is available."))
-    dlg.vbox.pack_start(label)
-
-    for update in updates:
-        ver = update[0]
-        url = update[1]
-        box_update = gtk.HBox()
-        # TRANSLATORS: %s expands to version such as '0.8.4' or '0.8.5beta' or
-        # similar
-        button_stable = gtk.Button(_("Update to version %s") % ver)
-        button_stable.connect(
-            'clicked', lambda dummy: open_url(url, parent, False))
-        button_stable.connect('clicked', lambda dummy: dlg.response(0))
-        box_update.pack_start(button_stable, False, padding=10)
-        dlg.vbox.pack_start(box_update, False)
-
-    dlg.add_button(gtk.STOCK_CLOSE, gtk.RESPONSE_CLOSE)
-
-    dlg.show_all()
-    dlg.run()
-    dlg.destroy()
-
-    return False
-
-
-def check_updates(check_beta, check_winapp2, append_text, cb_success):
-    """Check for updates via the Internet"""
-    opener = build_opener()
-    socket.setdefaulttimeout(bleachbit.socket_timeout)
-    opener.addheaders = [('User-Agent', user_agent())]
-    try:
-        handle = opener.open(bleachbit.update_check_url)
-    except URLError:
-        logger.exception(
-            _('Error when opening a network connection to %s to check for updates. Please verify the network is working.' %
-                bleachbit.update_check_url))
-        return ()
-    doc = handle.read()
-    try:
-        dom = xml.dom.minidom.parseString(doc)
-    except:
-        logger.exception('The update information does not parse: %s', doc)
-        return ()
-
-    def parse_updates(element):
-        if element:
-            ver = element[0].getAttribute('ver')
-            url = element[0].firstChild.data
-            return ver, url
-        return ()
-
-    stable = parse_updates(dom.getElementsByTagName("stable"))
-    beta = parse_updates(dom.getElementsByTagName("beta"))
-
-    wa_element = dom.getElementsByTagName('winapp2')
-    if check_winapp2 and wa_element:
-        wa_sha512 = wa_element[0].getAttribute('sha512')
-        wa_url = wa_element[0].getAttribute('url')
-        update_winapp2(wa_url, wa_sha512, append_text, cb_success)
-
-    dom.unlink()
-
-    if stable and beta and check_beta:
-        return stable, beta
-    if stable:
-        return stable,
-    if beta and check_beta:
-        return beta,
-    return ()
