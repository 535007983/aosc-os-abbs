diff --git a/keybinding/select_keystroke.go b/keybinding/select_keystroke.go
index a4087ffb..0619f2e6 100644
--- a/keybinding/select_keystroke.go
+++ b/keybinding/select_keystroke.go
@@ -42,9 +42,11 @@ func (m *Manager) selectKeystroke() error {
 	m.shortcutManager.EnableRecord(false)
 	defer m.shortcutManager.EnableRecord(true)
 
+	eventChan := make(chan x.GenericEvent, 500)
+	conn.AddEventChan(eventChan)
+
 loop:
-	for {
-		event := conn.WaitForEvent()
+	for event := range eventChan {
 		switch event.GetEventCode() {
 		case x.KeyPressEventCode:
 			event, _ := x.NewKeyPressEvent(event)
diff --git a/keybinding/shortcuts/shortcut_manager.go b/keybinding/shortcuts/shortcut_manager.go
index ac14df1e..d6b429e0 100644
--- a/keybinding/shortcuts/shortcut_manager.go
+++ b/keybinding/shortcuts/shortcut_manager.go
@@ -134,7 +134,7 @@ func (sm *ShortcutManager) recordEventLoop() {
 			continue
 		}
 
-		if reply.ClientSwapped != 0 {
+		if reply.ClientSwapped {
 			logger.Warning("reply.ClientSwapped is true")
 			continue
 		}
@@ -204,7 +204,8 @@ func (sm *ShortcutManager) initRecord() error {
 		},
 	}
 
-	err = record.CreateContextChecked(ctrlConn, ctx, record.ElementHeader(0), 1, 1, clientSpec, ranges).Check(ctrlConn)
+	err = record.CreateContextChecked(ctrlConn, ctx, record.ElementHeader(0),
+		clientSpec, ranges).Check(ctrlConn)
 	if err != nil {
 		return err
 	}
@@ -553,8 +554,9 @@ func (sm *ShortcutManager) handleXRecordButtonEvent(pressed bool) {
 }
 
 func (sm *ShortcutManager) EventLoop() {
-	for {
-		ev := sm.conn.WaitForEvent()
+	eventChan := make(chan x.GenericEvent, 500)
+	sm.conn.AddEventChan(eventChan)
+	for ev := range eventChan {
 		switch ev.GetEventCode() {
 		case x.KeyPressEventCode:
 			event, _ := x.NewKeyPressEvent(ev)
diff --git a/trayicon/tools.go b/trayicon/tools.go
index 3354aa9c..9b418469 100644
--- a/trayicon/tools.go
+++ b/trayicon/tools.go
@@ -33,7 +33,7 @@ func findRGBAVisualID() x.VisualID {
 	for _, dinfo := range screen.AllowedDepths {
 		if dinfo.Depth == 32 {
 			for _, vinfo := range dinfo.Visuals {
-				return vinfo.VisualId
+				return vinfo.Id
 			}
 		}
 	}
diff --git a/trayicon/traymanager.go b/trayicon/traymanager.go
index cbcdd641..7b4411ba 100644
--- a/trayicon/traymanager.go
+++ b/trayicon/traymanager.go
@@ -192,16 +192,15 @@ func sendClientMessage(win, dest x.Window, msgType x.Atom, pArray *[5]uint32) er
 	var data x.ClientMessageData
 	data.SetData32(pArray)
 	event := x.ClientMessageEvent{
-		ResponseType: x.ClientMessageEventCode,
-		Format:       32,
-		Window:       win,
-		Type:         msgType,
-		Data:         data,
+		Format: 32,
+		Window: win,
+		Type:   msgType,
+		Data:   data,
 	}
 	w := x.NewWriter()
-	x.ClientMessageEventWrite(w, &event)
+	x.WriteClientMessageEvent(w, &event)
 	const evMask = x.EventMaskStructureNotify
-	return x.SendEventChecked(XConn, x.False, dest, evMask, w.Bytes()).Check(XConn)
+	return x.SendEventChecked(XConn, false, dest, evMask, w.Bytes()).Check(XConn)
 }
 
 // to notify tray icon applications
@@ -239,9 +238,8 @@ func createOwnerWindow(visual x.VisualID) (x.Window, error) {
 		x.WindowClassInputOnly,
 		visual,
 		x.CWEventMask,
-		&x.CreateWindowValueList{
-			EventMask: x.EventMaskStructureNotify,
-		}).Check(XConn)
+		[]uint32{x.EventMaskStructureNotify},
+	).Check(XConn)
 	if err != nil {
 		return 0, err
 	}
@@ -274,9 +272,7 @@ func (m *TrayManager) acquireSystemTraySelection() error {
 		m.owner,                   // window
 		XA_NET_SYSTEM_TRAY_VISUAL, // property
 		x.AtomVisualID,            // type
-		32,
-		1,
-		w.Bytes())
+		32, w.Bytes())
 
 	w = x.NewWriter()
 	w.Write4b(0)
@@ -286,7 +282,6 @@ func (m *TrayManager) acquireSystemTraySelection() error {
 		XA_NET_SYSTEM_TRAY_ORIENTAION, // property
 		x.AtomCardinal,                // type
 		32,
-		1,
 		w.Bytes())
 
 	logger.Debug("acquire selection successful")
@@ -297,8 +292,10 @@ func (m *TrayManager) eventHandleLoop() {
 	damageExtData := XConn.GetExtensionData(damage.Ext())
 	damageFirstEvent := damageExtData.FirstEvent
 
-	for {
-		ev := XConn.WaitForEvent()
+	eventChan := make(chan x.GenericEvent, 500)
+	XConn.AddEventChan(eventChan)
+
+	for ev := range eventChan {
 		switch ev.GetEventCode() {
 		case x.ClientMessageEventCode:
 			event, _ := x.NewClientMessageEvent(ev)
@@ -363,12 +360,10 @@ func (m *TrayManager) addIcon(win x.Window) {
 	composite.RedirectWindow(XConn, win, composite.RedirectAutomatic)
 
 	const valueMask = x.CWBackPixel | x.CWEventMask
-	valueList := &x.ChangeWindowAttributesValueList{
-		BackgroundPixel: 0,
-		EventMask:       x.EventMaskVisibilityChange | x.EventMaskStructureNotify,
-	}
-
-	x.ChangeWindowAttributes(XConn, win, valueMask, valueList)
+	x.ChangeWindowAttributes(XConn, win, valueMask, []uint32{
+		0, // background pixel
+		x.EventMaskVisibilityChange | x.EventMaskStructureNotify, // event mask
+	})
 
 	m.service.Emit(m, "Added", uint32(win))
 	logger.Infof("Add tray icon %v name: %q", win, icon.getName())
