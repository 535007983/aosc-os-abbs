diff --git a/gesture/utils.go b/gesture/utils.go
index 9da02cf3..919f4a2f 100644
--- a/gesture/utils.go
+++ b/gesture/utils.go
@@ -42,15 +42,10 @@ func isKbdAlreadyGrabbed() bool {
 		xconn = conn
 	}
 
-	ewmhConn, err := ewmh.NewConn(xconn)
-	if err != nil {
-		return false
-	}
-
 	var grabWin x.Window
 
 	rootWin := xconn.GetDefaultScreen().Root
-	if activeWin, _ := ewmhConn.GetActiveWindow().Reply(ewmhConn); activeWin == 0 {
+	if activeWin, _ := ewmh.GetActiveWindow(xconn).Reply(xconn); activeWin == 0 {
 		grabWin = rootWin
 	} else {
 		// check viewable
@@ -66,7 +61,7 @@ func isKbdAlreadyGrabbed() bool {
 		}
 	}
 
-	err = keybind.GrabKeyboard(xconn, grabWin)
+	err := keybind.GrabKeyboard(xconn, grabWin)
 	if err == nil {
 		// grab keyboard successful
 		keybind.UngrabKeyboard(xconn)
diff --git a/keybinding/shortcuts/shortcut_manager.go b/keybinding/shortcuts/shortcut_manager.go
index d6b429e0..3e06b106 100644
--- a/keybinding/shortcuts/shortcut_manager.go
+++ b/keybinding/shortcuts/shortcut_manager.go
@@ -56,7 +56,6 @@ type ShortcutManager struct {
 	keyKeystrokeMap   map[Key]*Keystroke
 	keyKeystrokeMapMu sync.Mutex
 	keySymbols        *keysyms.KeySymbols
-	ewmhConn          *ewmh.Conn
 
 	recordEnable        bool
 	recordContext       record.Context
@@ -86,11 +85,9 @@ func NewShortcutManager(conn *x.Conn, keySymbols *keysyms.KeySymbols, eventCb Ke
 		layoutChanged:   make(chan struct{}),
 	}
 
-	ss.ewmhConn, _ = ewmh.NewConn(conn)
-
 	ss.xRecordEventHandler = NewXRecordEventHandler(keySymbols)
 	ss.xRecordEventHandler.modKeyReleasedCb = func(code uint8, mods uint16) {
-		if isKbdAlreadyGrabbed(ss.conn, ss.ewmhConn) {
+		if isKbdAlreadyGrabbed(ss.conn) {
 			return
 		}
 		switch mods {
@@ -485,11 +482,11 @@ func (sm *ShortcutManager) emitKeyEvent(mods Modifiers, key Key) {
 	}
 }
 
-func isKbdAlreadyGrabbed(conn *x.Conn, ewmhConn *ewmh.Conn) bool {
+func isKbdAlreadyGrabbed(conn *x.Conn) bool {
 	var grabWin x.Window
 
 	rootWin := conn.GetDefaultScreen().Root
-	if activeWin, _ := ewmhConn.GetActiveWindow().Reply(ewmhConn); activeWin == 0 {
+	if activeWin, _ := ewmh.GetActiveWindow(conn).Reply(conn); activeWin == 0 {
 		grabWin = rootWin
 	} else {
 		// check viewable
diff --git a/trayicon/daemon.go b/trayicon/daemon.go
index 0b2e11f2..3f22f8e8 100644
--- a/trayicon/daemon.go
+++ b/trayicon/daemon.go
@@ -21,8 +21,6 @@ package trayicon
 
 import (
 	x "github.com/linuxdeepin/go-x11-client"
-	"github.com/linuxdeepin/go-x11-client/util/wm/ewmh"
-	"github.com/linuxdeepin/go-x11-client/util/wm/icccm"
 	"pkg.deepin.io/dde/daemon/loader"
 	"pkg.deepin.io/lib/log"
 )
@@ -56,16 +54,6 @@ func (d *Daemon) Start() error {
 		return err
 	}
 
-	ewmhConn, err = ewmh.NewConn(XConn)
-	if err != nil {
-		return err
-	}
-
-	icccmConn, err = icccm.NewConn(XConn)
-	if err != nil {
-		return err
-	}
-
 	initX()
 	service := loader.GetService()
 	d.manager = NewTrayManager(service)
diff --git a/trayicon/icon.go b/trayicon/icon.go
index fc465582..0200dc9c 100644
--- a/trayicon/icon.go
+++ b/trayicon/icon.go
@@ -27,6 +27,8 @@ import (
 	x "github.com/linuxdeepin/go-x11-client"
 	"github.com/linuxdeepin/go-x11-client/ext/composite"
 	"github.com/linuxdeepin/go-x11-client/ext/damage"
+	"github.com/linuxdeepin/go-x11-client/util/wm/ewmh"
+	"github.com/linuxdeepin/go-x11-client/util/wm/icccm"
 )
 
 type TrayIcon struct {
@@ -45,12 +47,12 @@ func NewTrayIcon(win x.Window) *TrayIcon {
 }
 
 func (icon *TrayIcon) getName() string {
-	wmName, _ := ewmhConn.GetWMName(icon.win).Reply(ewmhConn)
+	wmName, _ := ewmh.GetWMName(XConn, icon.win).Reply(XConn)
 	if wmName != "" {
 		return wmName
 	}
 
-	wmNameTextProp, err := icccmConn.GetWMName(icon.win).Reply(icccmConn)
+	wmNameTextProp, err := icccm.GetWMName(XConn, icon.win).Reply(XConn)
 	if err == nil {
 		wmName, _ := wmNameTextProp.GetStr()
 		if wmName != "" {
@@ -58,7 +60,7 @@ func (icon *TrayIcon) getName() string {
 		}
 	}
 
-	wmClass, err := icccmConn.GetWMClass(icon.win).Reply(icccmConn)
+	wmClass, err := icccm.GetWMClass(XConn, icon.win).Reply(XConn)
 	if err == nil {
 		return fmt.Sprintf("[%s|%s]", wmClass.Class, wmClass.Instance)
 	}
diff --git a/trayicon/init.go b/trayicon/init.go
index ef31c3b6..d7f5ce66 100644
--- a/trayicon/init.go
+++ b/trayicon/init.go
@@ -24,8 +24,6 @@ import (
 	"github.com/linuxdeepin/go-x11-client/ext/composite"
 	"github.com/linuxdeepin/go-x11-client/ext/damage"
 	"github.com/linuxdeepin/go-x11-client/util/atom"
-	"github.com/linuxdeepin/go-x11-client/util/wm/ewmh"
-	"github.com/linuxdeepin/go-x11-client/util/wm/icccm"
 
 	"pkg.deepin.io/dde/daemon/loader"
 	"pkg.deepin.io/lib/log"
@@ -38,9 +36,7 @@ func init() {
 var (
 	logger = log.NewLogger("daemon/trayicon")
 
-	XConn     *x.Conn
-	ewmhConn  *ewmh.Conn
-	icccmConn *icccm.Conn
+	XConn *x.Conn
 
 	XA_NET_SYSTEM_TRAY_S0         x.Atom
 	XA_NET_SYSTEM_TRAY_OPCODE     x.Atom
