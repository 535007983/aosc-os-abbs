diff --git a/src/screencaststream.cpp b/src/screencaststream.cpp
index cb22ab4..cd73025 100644
--- a/src/screencaststream.cpp
+++ b/src/screencaststream.cpp
@@ -193,7 +193,11 @@ static void onStreamStateChanged(void *data, pw_stream_state old, pw_stream_stat
     }
 }
 
+#if defined(PW_API_PRE_0_2_0)
 static void onStreamFormatChanged(void *data, struct spa_pod *format)
+#else
+static void onStreamFormatChanged(void *data, const struct spa_pod *format)
+#endif // defined(PW_API_PRE_0_2_0)
 {
     qCDebug(XdgDesktopPortalKdeScreenCastStream) << "Stream format changed";
 
@@ -202,7 +206,11 @@ static void onStreamFormatChanged(void *data, struct spa_pod *format)
     uint8_t paramsBuffer[1024];
     int32_t width, height, stride, size;
     struct spa_pod_builder pod_builder;
+#if defined(PW_API_PRE_0_2_0)
     struct spa_pod *params[1];
+#else
+    const struct spa_pod *params[1];
+#endif // defined(PW_API_PRE_0_2_0)
     const int bpp = 4;
 
     if (!format) {
@@ -245,13 +253,17 @@ static const struct pw_stream_events pwStreamEvents = {
     .format_changed = onStreamFormatChanged,
     .add_buffer = nullptr,
     .remove_buffer = nullptr,
+#if defined(PW_API_PRE_0_2_0)
     .new_buffer = nullptr,
     .need_buffer = nullptr,
+#else
+    .process = nullptr,
+#endif // defined(PW_API_PRE_0_2_0)
 };
 
 ScreenCastStream::ScreenCastStream(const QSize &resolution, QObject *parent)
-    : resolution(resolution)
-    , QObject(parent)
+    : QObject(parent)
+    , resolution(resolution)
 {
 }
 
@@ -337,7 +349,6 @@ bool ScreenCastStream::createStream()
     int height = resolution.height();
 
     spa_fraction paramFraction = SPA_FRACTION(0, 1);
-    spa_rectangle paramRectangle = SPA_RECTANGLE((uint32_t)width, (uint32_t)height);
 
     params[0] = (spa_pod*)spa_pod_builder_object(&podBuilder,
                                        pwCoreType->param.idEnumFormat, pwCoreType->spa_format,
@@ -350,7 +361,11 @@ bool ScreenCastStream::createStream()
 
     pw_stream_add_listener(pwStream, &streamListener, &pwStreamEvents, this);
 
+#if defined(PW_API_PRE_0_2_0)
     if (pw_stream_connect(pwStream, PW_DIRECTION_OUTPUT, nullptr, PW_STREAM_FLAG_NONE, params, G_N_ELEMENTS(&params)) != 0) {
+#else
+    if (pw_stream_connect(pwStream, PW_DIRECTION_OUTPUT, nullptr, static_cast<pw_stream_flags>(PW_STREAM_FLAG_DRIVER | PW_STREAM_FLAG_MAP_BUFFERS), params, G_N_ELEMENTS(&params)) != 0) {
+#endif // defined(PW_API_PRE_0_2_0)
         qCWarning(XdgDesktopPortalKdeScreenCastStream) << "Could not connect to stream";
         return false;
     }
@@ -360,8 +375,12 @@ bool ScreenCastStream::createStream()
 
 bool ScreenCastStream::recordFrame(uint8_t *screenData)
 {
+#if defined(PW_API_PRE_0_2_0)
     uint32_t bufferId;
-    struct spa_buffer *buffer;
+#else
+    struct pw_buffer *buffer;
+#endif // defined(PW_API_PRE_0_2_0)
+    struct spa_buffer *spa_buffer;
     uint8_t *map = nullptr;
     uint8_t *data = nullptr;
 
@@ -371,6 +390,7 @@ bool ScreenCastStream::recordFrame(uint8_t *screenData)
         return false;
     }
 
+#if defined(PW_API_PRE_0_2_0)
     bufferId = pw_stream_get_empty_buffer(pwStream);
 
     if (bufferId == SPA_ID_INVALID) {
@@ -378,19 +398,31 @@ bool ScreenCastStream::recordFrame(uint8_t *screenData)
         return false;
     }
 
-    buffer = pw_stream_peek_buffer(pwStream, bufferId);
+    spa_buffer = pw_stream_peek_buffer(pwStream, bufferId);
+#else
+    buffer = pw_stream_dequeue_buffer(pwStream);
+#endif // defined(PW_API_PRE_0_2_0)
 
-    if (buffer->datas[0].type == pwCoreType->data.MemFd) {
-        map = (uint8_t *)mmap(nullptr, buffer->datas[0].maxsize + buffer->datas[0].mapoffset, PROT_READ | PROT_WRITE, MAP_SHARED, buffer->datas[0].fd, 0);
+#if defined(PW_API_PRE_0_2_0)
+    if (spa_buffer->datas[0].type == pwCoreType->data.MemFd) {
+#else
+    spa_buffer = buffer->buffer;
+
+    if (spa_buffer->datas[0].data) {
+        data = (uint8_t *) spa_buffer->datas[0].data;
+    } else if (spa_buffer->datas[0].type == pwCoreType->data.MemFd) {
+#endif // defined(PW_API_PRE_0_2_0)
+        map = (uint8_t *)mmap(nullptr, spa_buffer->datas[0].maxsize + spa_buffer->datas[0].mapoffset, PROT_READ | PROT_WRITE, MAP_SHARED, spa_buffer->datas[0].fd, 0);
 
         if (map == MAP_FAILED) {
             qCWarning(XdgDesktopPortalKdeScreenCastStream) << "Failed to mmap pipewire stream buffer: " << strerror(errno);
             return false;
         }
-
-        data = SPA_MEMBER(map, buffer->datas[0].mapoffset, uint8_t);
-    } else if (buffer->datas[0].type == pwCoreType->data.MemPtr) {
-        data = (uint8_t *) buffer->datas[0].data;
+        data = SPA_MEMBER(map, spa_buffer->datas[0].mapoffset, uint8_t);
+#if defined(PW_API_PRE_0_2_0)
+    } else if (spa_buffer->datas[0].type == pwCoreType->data.MemPtr) {
+        data = (uint8_t *) spa_buffer->datas[0].data;
+#endif // defined(PW_API_PRE_0_2_0)
     } else {
         return false;
     }
@@ -398,13 +430,16 @@ bool ScreenCastStream::recordFrame(uint8_t *screenData)
     memcpy(data, screenData, BITS_PER_PIXEL * videoFormat.size.height * videoFormat.size.width * sizeof(uint8_t));
 
     if (map) {
-        munmap(map, buffer->datas[0].maxsize + buffer->datas[0].mapoffset);
+        munmap(map, spa_buffer->datas[0].maxsize + spa_buffer->datas[0].mapoffset);
     }
 
-    buffer->datas[0].chunk->size = buffer->datas[0].maxsize;
+    spa_buffer->datas[0].chunk->size = spa_buffer->datas[0].maxsize;
 
+#if defined(PW_API_PRE_0_2_0)
     pw_stream_send_buffer(pwStream, bufferId);
-
+#else
+    pw_stream_queue_buffer(pwStream, buffer);
+#endif // defined(PW_API_PRE_0_2_0)
     return true;
 }
 
diff --git a/src/screencaststream.h b/src/screencaststream.h
index f500418..2c57249 100644
--- a/src/screencaststream.h
+++ b/src/screencaststream.h
@@ -39,6 +39,16 @@
 #include <pipewire/remote.h>
 #include <pipewire/stream.h>
 
+#ifdef __has_include
+  #if __has_include(<pipewire/version.h>)
+    #include<pipewire/version.h>
+  #else
+    #define PW_API_PRE_0_2_0
+  #endif // __has_include(<pipewire/version.h>)
+#else
+  #define PW_API_PRE_0_2_0
+#endif // __has_include
+
 class PwType {
 public:
   spa_type_media_type media_type;
